
F103Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003afc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cdc  08003cdc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003cdc  08003cdc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cdc  08003cdc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  20000078  08003d5c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  08003d5c  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ad3  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001db1  00000000  00000000  00028bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  0002a968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000699  00000000  00000000  0002b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d00  00000000  00000000  0002b891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a933  00000000  00000000  00043591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000844ff  00000000  00000000  0004dec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028ec  00000000  00000000  000d23c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d4cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bf0 	.word	0x08003bf0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003bf0 	.word	0x08003bf0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd0e 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81a 	bl	800018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8b2 	bl	80002c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f85c 	bl	8000218 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f884 	bl	800026c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_UART_Receive_IT(&huart1, &RPiDataByte, 1);
 8000164:	2201      	movs	r2, #1
 8000166:	4906      	ldr	r1, [pc, #24]	; (8000180 <main+0x34>)
 8000168:	4806      	ldr	r0, [pc, #24]	; (8000184 <main+0x38>)
 800016a:	f002 f815 	bl	8002198 <HAL_UART_Receive_IT>
	printf("Program Start...\r\n");
 800016e:	4806      	ldr	r0, [pc, #24]	; (8000188 <main+0x3c>)
 8000170:	f002 fece 	bl	8002f10 <puts>
	 Firmware_Update();
 8000174:	f000 fa96 	bl	80006a4 <Firmware_Update>
	 Application();
 8000178:	f000 fb0a 	bl	8000790 <Application>

  while (1)
 800017c:	e7fe      	b.n	800017c <main+0x30>
 800017e:	bf00      	nop
 8000180:	20000124 	.word	0x20000124
 8000184:	20000094 	.word	0x20000094
 8000188:	08003c08 	.word	0x08003c08

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b090      	sub	sp, #64	; 0x40
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0318 	add.w	r3, r7, #24
 8000196:	2228      	movs	r2, #40	; 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f002 ff98 	bl	80030d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]
 80001ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ae:	2301      	movs	r3, #1
 80001b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b8:	2300      	movs	r3, #0
 80001ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001bc:	2301      	movs	r3, #1
 80001be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c0:	2302      	movs	r3, #2
 80001c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d0:	f107 0318 	add.w	r3, r7, #24
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 fac7 	bl	8001768 <HAL_RCC_OscConfig>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d001      	beq.n	80001e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001e0:	f000 fb04 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e4:	230f      	movs	r3, #15
 80001e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e8:	2302      	movs	r3, #2
 80001ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2102      	movs	r1, #2
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fd34 	bl	8001c6c <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800020a:	f000 faef 	bl	80007ec <Error_Handler>
  }
}
 800020e:	bf00      	nop
 8000210:	3740      	adds	r7, #64	; 0x40
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800021e:	4a12      	ldr	r2, [pc, #72]	; (8000268 <MX_USART1_UART_Init+0x50>)
 8000220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000222:	4b10      	ldr	r3, [pc, #64]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000238:	2200      	movs	r2, #0
 800023a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800023c:	4b09      	ldr	r3, [pc, #36]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800023e:	220c      	movs	r2, #12
 8000240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800024a:	2200      	movs	r2, #0
 800024c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000250:	f001 fe9a 	bl	8001f88 <HAL_UART_Init>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800025a:	f000 fac7 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000094 	.word	0x20000094
 8000268:	40013800 	.word	0x40013800

0800026c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <MX_USART2_UART_Init+0x50>)
 8000274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800027c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000292:	2208      	movs	r2, #8
 8000294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 80002a4:	f001 fe70 	bl	8001f88 <HAL_UART_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ae:	f000 fa9d 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000dc 	.word	0x200000dc
 80002bc:	40004400 	.word	0x40004400

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <MX_GPIO_Init+0xa8>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a23      	ldr	r2, [pc, #140]	; (8000368 <MX_GPIO_Init+0xa8>)
 80002da:	f043 0310 	orr.w	r3, r3, #16
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b21      	ldr	r3, [pc, #132]	; (8000368 <MX_GPIO_Init+0xa8>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0310 	and.w	r3, r3, #16
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ec:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <MX_GPIO_Init+0xa8>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <MX_GPIO_Init+0xa8>)
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_GPIO_Init+0xa8>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0320 	and.w	r3, r3, #32
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_GPIO_Init+0xa8>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a17      	ldr	r2, [pc, #92]	; (8000368 <MX_GPIO_Init+0xa8>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_GPIO_Init+0xa8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLed_GPIO_Port, BLed_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000322:	4812      	ldr	r0, [pc, #72]	; (800036c <MX_GPIO_Init+0xac>)
 8000324:	f001 f9ee 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLed_Pin */
  GPIO_InitStruct.Pin = BLed_Pin;
 8000328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2302      	movs	r3, #2
 8000338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLed_GPIO_Port, &GPIO_InitStruct);
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	4619      	mov	r1, r3
 8000340:	480a      	ldr	r0, [pc, #40]	; (800036c <MX_GPIO_Init+0xac>)
 8000342:	f001 f85b 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RpiBootEnb_Pin */
  GPIO_InitStruct.Pin = RpiBootEnb_Pin;
 8000346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800034a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000350:	2300      	movs	r3, #0
 8000352:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RpiBootEnb_GPIO_Port, &GPIO_InitStruct);
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	4619      	mov	r1, r3
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_GPIO_Init+0xb0>)
 800035c:	f001 f84e 	bl	80013fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000360:	bf00      	nop
 8000362:	3720      	adds	r7, #32
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40021000 	.word	0x40021000
 800036c:	40011000 	.word	0x40011000
 8000370:	40010800 	.word	0x40010800

08000374 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800037c:	1d39      	adds	r1, r7, #4
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
 8000382:	2201      	movs	r2, #1
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <__io_putchar+0x20>)
 8000386:	f001 fe4f 	bl	8002028 <HAL_UART_Transmit>

  return ch;
 800038a:	687b      	ldr	r3, [r7, #4]
}
 800038c:	4618      	mov	r0, r3
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	200000dc 	.word	0x200000dc

08000398 <write_data_to_flash_app>:


static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 8000398:	b5b0      	push	{r4, r5, r7, lr}
 800039a:	b08a      	sub	sp, #40	; 0x28
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	807b      	strh	r3, [r7, #2]
 80003a4:	4613      	mov	r3, r2
 80003a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 80003a8:	f000 fe98 	bl	80010dc <HAL_FLASH_Unlock>
 80003ac:	4603      	mov	r3, r0
 80003ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 80003b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d165      	bne.n	8000486 <write_data_to_flash_app+0xee>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 80003ba:	787b      	ldrb	r3, [r7, #1]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d017      	beq.n	80003f0 <write_data_to_flash_app+0x58>
      //printf("Erasing the Flash memory...\r\n");
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.PageAddress   = ETX_APP_START_ADDRESS;
 80003c4:	4b35      	ldr	r3, [pc, #212]	; (800049c <write_data_to_flash_app+0x104>)
 80003c6:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbPages       = 47;                     //47 Pages
 80003c8:	232f      	movs	r3, #47	; 0x2f
 80003ca:	61bb      	str	r3, [r7, #24]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80003cc:	f107 0208 	add.w	r2, r7, #8
 80003d0:	f107 030c 	add.w	r3, r7, #12
 80003d4:	4611      	mov	r1, r2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 ff68 	bl	80012ac <HAL_FLASHEx_Erase>
 80003dc:	4603      	mov	r3, r0
 80003de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if( ret != HAL_OK )
 80003e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d14f      	bne.n	800048a <write_data_to_flash_app+0xf2>
      {
        break;
      }
      application_write_idx = 0;
 80003ea:	4b2d      	ldr	r3, [pc, #180]	; (80004a0 <write_data_to_flash_app+0x108>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	801a      	strh	r2, [r3, #0]
    }

    for(int i = 0; i < data_len/2; i++)
 80003f0:	2300      	movs	r3, #0
 80003f2:	623b      	str	r3, [r7, #32]
 80003f4:	e031      	b.n	800045a <write_data_to_flash_app+0xc2>
    {
      uint16_t halfword_data = data[i * 2] | (data[i * 2 + 1] << 8);
 80003f6:	6a3b      	ldr	r3, [r7, #32]
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	461a      	mov	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4413      	add	r3, r2
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	b21a      	sxth	r2, r3
 8000404:	6a3b      	ldr	r3, [r7, #32]
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	3301      	adds	r3, #1
 800040a:	6879      	ldr	r1, [r7, #4]
 800040c:	440b      	add	r3, r1
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	021b      	lsls	r3, r3, #8
 8000412:	b21b      	sxth	r3, r3
 8000414:	4313      	orrs	r3, r2
 8000416:	b21b      	sxth	r3, r3
 8000418:	83fb      	strh	r3, [r7, #30]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
                               (ETX_APP_START_ADDRESS + application_write_idx ),
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <write_data_to_flash_app+0x108>)
 800041c:	881b      	ldrh	r3, [r3, #0]
 800041e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000422:	f503 4388 	add.w	r3, r3, #17408	; 0x4400
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
 8000426:	4619      	mov	r1, r3
 8000428:	8bfb      	ldrh	r3, [r7, #30]
 800042a:	2200      	movs	r2, #0
 800042c:	461c      	mov	r4, r3
 800042e:	4615      	mov	r5, r2
 8000430:	4622      	mov	r2, r4
 8000432:	462b      	mov	r3, r5
 8000434:	2001      	movs	r0, #1
 8000436:	f000 fde1 	bl	8000ffc <HAL_FLASH_Program>
 800043a:	4603      	mov	r3, r0
 800043c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                               halfword_data
                             );
      if( ret == HAL_OK )
 8000440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000444:	2b00      	cmp	r3, #0
 8000446:	d110      	bne.n	800046a <write_data_to_flash_app+0xd2>
      {
        //update the data count
        application_write_idx += 2;
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <write_data_to_flash_app+0x108>)
 800044a:	881b      	ldrh	r3, [r3, #0]
 800044c:	3302      	adds	r3, #2
 800044e:	b29a      	uxth	r2, r3
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <write_data_to_flash_app+0x108>)
 8000452:	801a      	strh	r2, [r3, #0]
    for(int i = 0; i < data_len/2; i++)
 8000454:	6a3b      	ldr	r3, [r7, #32]
 8000456:	3301      	adds	r3, #1
 8000458:	623b      	str	r3, [r7, #32]
 800045a:	887b      	ldrh	r3, [r7, #2]
 800045c:	085b      	lsrs	r3, r3, #1
 800045e:	b29b      	uxth	r3, r3
 8000460:	461a      	mov	r2, r3
 8000462:	6a3b      	ldr	r3, [r7, #32]
 8000464:	4293      	cmp	r3, r2
 8000466:	dbc6      	blt.n	80003f6 <write_data_to_flash_app+0x5e>
 8000468:	e000      	b.n	800046c <write_data_to_flash_app+0xd4>
      }
      else
      {
       // printf("Flash Write Error...HALT!!!\r\n");
        break;
 800046a:	bf00      	nop
      }
    }

    if( ret != HAL_OK )
 800046c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000470:	2b00      	cmp	r3, #0
 8000472:	d10c      	bne.n	800048e <write_data_to_flash_app+0xf6>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000474:	f000 fe58 	bl	8001128 <HAL_FLASH_Lock>
 8000478:	4603      	mov	r3, r0
 800047a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 800047e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000482:	2b00      	cmp	r3, #0
 8000484:	e004      	b.n	8000490 <write_data_to_flash_app+0xf8>
      break;
 8000486:	bf00      	nop
 8000488:	e002      	b.n	8000490 <write_data_to_flash_app+0xf8>
        break;
 800048a:	bf00      	nop
 800048c:	e000      	b.n	8000490 <write_data_to_flash_app+0xf8>
      break;
 800048e:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000494:	4618      	mov	r0, r3
 8000496:	3728      	adds	r7, #40	; 0x28
 8000498:	46bd      	mov	sp, r7
 800049a:	bdb0      	pop	{r4, r5, r7, pc}
 800049c:	08004400 	.word	0x08004400
 80004a0:	20000534 	.word	0x20000534

080004a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	DataFlagCount=0;
 80004ac:	4b6d      	ldr	r3, [pc, #436]	; (8000664 <HAL_UART_RxCpltCallback+0x1c0>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(BLed_GPIO_Port, BLed_Pin);
 80004b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b6:	486c      	ldr	r0, [pc, #432]	; (8000668 <HAL_UART_RxCpltCallback+0x1c4>)
 80004b8:	f001 f93c 	bl	8001734 <HAL_GPIO_TogglePin>
	Block[Index++]=RPiDataByte;
 80004bc:	4b6b      	ldr	r3, [pc, #428]	; (800066c <HAL_UART_RxCpltCallback+0x1c8>)
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	1c5a      	adds	r2, r3, #1
 80004c2:	b291      	uxth	r1, r2
 80004c4:	4a69      	ldr	r2, [pc, #420]	; (800066c <HAL_UART_RxCpltCallback+0x1c8>)
 80004c6:	8011      	strh	r1, [r2, #0]
 80004c8:	461a      	mov	r2, r3
 80004ca:	4b69      	ldr	r3, [pc, #420]	; (8000670 <HAL_UART_RxCpltCallback+0x1cc>)
 80004cc:	7819      	ldrb	r1, [r3, #0]
 80004ce:	4b69      	ldr	r3, [pc, #420]	; (8000674 <HAL_UART_RxCpltCallback+0x1d0>)
 80004d0:	5499      	strb	r1, [r3, r2]
	if(IlkSifre!=10)
 80004d2:	4b69      	ldr	r3, [pc, #420]	; (8000678 <HAL_UART_RxCpltCallback+0x1d4>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b0a      	cmp	r3, #10
 80004d8:	d049      	beq.n	800056e <HAL_UART_RxCpltCallback+0xca>
	{
			if(( '{' == RPiDataByte || Block[0]== 0x7B) && IlkSifre==0) IlkSifre=1;
 80004da:	4b65      	ldr	r3, [pc, #404]	; (8000670 <HAL_UART_RxCpltCallback+0x1cc>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b7b      	cmp	r3, #123	; 0x7b
 80004e0:	d003      	beq.n	80004ea <HAL_UART_RxCpltCallback+0x46>
 80004e2:	4b64      	ldr	r3, [pc, #400]	; (8000674 <HAL_UART_RxCpltCallback+0x1d0>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b7b      	cmp	r3, #123	; 0x7b
 80004e8:	d106      	bne.n	80004f8 <HAL_UART_RxCpltCallback+0x54>
 80004ea:	4b63      	ldr	r3, [pc, #396]	; (8000678 <HAL_UART_RxCpltCallback+0x1d4>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <HAL_UART_RxCpltCallback+0x54>
 80004f2:	4b61      	ldr	r3, [pc, #388]	; (8000678 <HAL_UART_RxCpltCallback+0x1d4>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
			if( IlkSifre==1 &&( RPiDataByte == '}' || RPiDataByte ==  0x7D  ) && Index < 8  && Index > 4 )
 80004f8:	4b5f      	ldr	r3, [pc, #380]	; (8000678 <HAL_UART_RxCpltCallback+0x1d4>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d136      	bne.n	800056e <HAL_UART_RxCpltCallback+0xca>
 8000500:	4b5b      	ldr	r3, [pc, #364]	; (8000670 <HAL_UART_RxCpltCallback+0x1cc>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b7d      	cmp	r3, #125	; 0x7d
 8000506:	d003      	beq.n	8000510 <HAL_UART_RxCpltCallback+0x6c>
 8000508:	4b59      	ldr	r3, [pc, #356]	; (8000670 <HAL_UART_RxCpltCallback+0x1cc>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b7d      	cmp	r3, #125	; 0x7d
 800050e:	d12e      	bne.n	800056e <HAL_UART_RxCpltCallback+0xca>
 8000510:	4b56      	ldr	r3, [pc, #344]	; (800066c <HAL_UART_RxCpltCallback+0x1c8>)
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	2b07      	cmp	r3, #7
 8000516:	d82a      	bhi.n	800056e <HAL_UART_RxCpltCallback+0xca>
 8000518:	4b54      	ldr	r3, [pc, #336]	; (800066c <HAL_UART_RxCpltCallback+0x1c8>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d926      	bls.n	800056e <HAL_UART_RxCpltCallback+0xca>
			{
					Block[0]=0;	Block[5]=0;
 8000520:	4b54      	ldr	r3, [pc, #336]	; (8000674 <HAL_UART_RxCpltCallback+0x1d0>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	4b53      	ldr	r3, [pc, #332]	; (8000674 <HAL_UART_RxCpltCallback+0x1d0>)
 8000528:	2200      	movs	r2, #0
 800052a:	715a      	strb	r2, [r3, #5]
					BLeng = Block[1]<<24 | Block[2]<<16 | Block[3]<<8 | Block[4];
 800052c:	4b51      	ldr	r3, [pc, #324]	; (8000674 <HAL_UART_RxCpltCallback+0x1d0>)
 800052e:	785b      	ldrb	r3, [r3, #1]
 8000530:	061a      	lsls	r2, r3, #24
 8000532:	4b50      	ldr	r3, [pc, #320]	; (8000674 <HAL_UART_RxCpltCallback+0x1d0>)
 8000534:	789b      	ldrb	r3, [r3, #2]
 8000536:	041b      	lsls	r3, r3, #16
 8000538:	431a      	orrs	r2, r3
 800053a:	4b4e      	ldr	r3, [pc, #312]	; (8000674 <HAL_UART_RxCpltCallback+0x1d0>)
 800053c:	78db      	ldrb	r3, [r3, #3]
 800053e:	021b      	lsls	r3, r3, #8
 8000540:	4313      	orrs	r3, r2
 8000542:	4a4c      	ldr	r2, [pc, #304]	; (8000674 <HAL_UART_RxCpltCallback+0x1d0>)
 8000544:	7912      	ldrb	r2, [r2, #4]
 8000546:	4313      	orrs	r3, r2
 8000548:	461a      	mov	r2, r3
 800054a:	4b4c      	ldr	r3, [pc, #304]	; (800067c <HAL_UART_RxCpltCallback+0x1d8>)
 800054c:	601a      	str	r2, [r3, #0]
					BlockLeng=BLeng;
 800054e:	4b4b      	ldr	r3, [pc, #300]	; (800067c <HAL_UART_RxCpltCallback+0x1d8>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a4b      	ldr	r2, [pc, #300]	; (8000680 <HAL_UART_RxCpltCallback+0x1dc>)
 8000554:	6013      	str	r3, [r2, #0]
					DataCount++;
 8000556:	4b4b      	ldr	r3, [pc, #300]	; (8000684 <HAL_UART_RxCpltCallback+0x1e0>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b49      	ldr	r3, [pc, #292]	; (8000684 <HAL_UART_RxCpltCallback+0x1e0>)
 8000560:	701a      	strb	r2, [r3, #0]
					Index=0;
 8000562:	4b42      	ldr	r3, [pc, #264]	; (800066c <HAL_UART_RxCpltCallback+0x1c8>)
 8000564:	2200      	movs	r2, #0
 8000566:	801a      	strh	r2, [r3, #0]
					IlkSifre=10;
 8000568:	4b43      	ldr	r3, [pc, #268]	; (8000678 <HAL_UART_RxCpltCallback+0x1d4>)
 800056a:	220a      	movs	r2, #10
 800056c:	701a      	strb	r2, [r3, #0]
			}
		}
  if( Index == MaxIndex  )
 800056e:	4b3f      	ldr	r3, [pc, #252]	; (800066c <HAL_UART_RxCpltCallback+0x1c8>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	4b44      	ldr	r3, [pc, #272]	; (8000688 <HAL_UART_RxCpltCallback+0x1e4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	429a      	cmp	r2, r3
 800057a:	d169      	bne.n	8000650 <HAL_UART_RxCpltCallback+0x1ac>
	{
	  	IndexSum=Index;
 800057c:	4b3b      	ldr	r3, [pc, #236]	; (800066c <HAL_UART_RxCpltCallback+0x1c8>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b42      	ldr	r3, [pc, #264]	; (800068c <HAL_UART_RxCpltCallback+0x1e8>)
 8000584:	601a      	str	r2, [r3, #0]
		if(BLeng>=1024)
 8000586:	4b3d      	ldr	r3, [pc, #244]	; (800067c <HAL_UART_RxCpltCallback+0x1d8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800058e:	d313      	bcc.n	80005b8 <HAL_UART_RxCpltCallback+0x114>
		{
			BLeng=BLeng-MaxIndex;
 8000590:	4b3a      	ldr	r3, [pc, #232]	; (800067c <HAL_UART_RxCpltCallback+0x1d8>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b3c      	ldr	r3, [pc, #240]	; (8000688 <HAL_UART_RxCpltCallback+0x1e4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	4a38      	ldr	r2, [pc, #224]	; (800067c <HAL_UART_RxCpltCallback+0x1d8>)
 800059c:	6013      	str	r3, [r2, #0]
			MaxIndex = 1024;
 800059e:	4b3a      	ldr	r3, [pc, #232]	; (8000688 <HAL_UART_RxCpltCallback+0x1e4>)
 80005a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005a4:	601a      	str	r2, [r3, #0]
			current_app_size=MaxIndex+current_app_size;
 80005a6:	4b38      	ldr	r3, [pc, #224]	; (8000688 <HAL_UART_RxCpltCallback+0x1e4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	4b38      	ldr	r3, [pc, #224]	; (8000690 <HAL_UART_RxCpltCallback+0x1ec>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	4413      	add	r3, r2
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	4b36      	ldr	r3, [pc, #216]	; (8000690 <HAL_UART_RxCpltCallback+0x1ec>)
 80005b6:	801a      	strh	r2, [r3, #0]
		}
		if(BLeng<1024)
 80005b8:	4b30      	ldr	r3, [pc, #192]	; (800067c <HAL_UART_RxCpltCallback+0x1d8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005c0:	d20c      	bcs.n	80005dc <HAL_UART_RxCpltCallback+0x138>
		{
			MaxIndex = BLeng;
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <HAL_UART_RxCpltCallback+0x1d8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a30      	ldr	r2, [pc, #192]	; (8000688 <HAL_UART_RxCpltCallback+0x1e4>)
 80005c8:	6013      	str	r3, [r2, #0]
			current_app_size=MaxIndex+current_app_size;
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <HAL_UART_RxCpltCallback+0x1e4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <HAL_UART_RxCpltCallback+0x1ec>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	4413      	add	r3, r2
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b2d      	ldr	r3, [pc, #180]	; (8000690 <HAL_UART_RxCpltCallback+0x1ec>)
 80005da:	801a      	strh	r2, [r3, #0]
		}
		if( ( Index == MAX_BLOCK_SIZE ) || ( current_app_size >= BlockLeng) )
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <HAL_UART_RxCpltCallback+0x1c8>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005e4:	d006      	beq.n	80005f4 <HAL_UART_RxCpltCallback+0x150>
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <HAL_UART_RxCpltCallback+0x1ec>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <HAL_UART_RxCpltCallback+0x1dc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d31c      	bcc.n	800062e <HAL_UART_RxCpltCallback+0x18a>
		{
			printf("\rTransfer %d \r\n", ( BlockLeng-BLeng ));
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <HAL_UART_RxCpltCallback+0x1dc>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <HAL_UART_RxCpltCallback+0x1d8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	4619      	mov	r1, r3
 8000600:	4824      	ldr	r0, [pc, #144]	; (8000694 <HAL_UART_RxCpltCallback+0x1f0>)
 8000602:	f002 fc1f 	bl	8002e44 <iprintf>
			if( write_data_to_flash_app(Block, MAX_BLOCK_SIZE, (current_app_size <= MAX_BLOCK_SIZE) ) != HAL_OK )
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <HAL_UART_RxCpltCallback+0x1ec>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800060e:	bf94      	ite	ls
 8000610:	2301      	movls	r3, #1
 8000612:	2300      	movhi	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061c:	4815      	ldr	r0, [pc, #84]	; (8000674 <HAL_UART_RxCpltCallback+0x1d0>)
 800061e:	f7ff febb 	bl	8000398 <write_data_to_flash_app>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <HAL_UART_RxCpltCallback+0x18a>
			{
				printf("HALT!!!\r\n");
 8000628:	481b      	ldr	r0, [pc, #108]	; (8000698 <HAL_UART_RxCpltCallback+0x1f4>)
 800062a:	f002 fc71 	bl	8002f10 <puts>
			}
		}
		Index=0;
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_UART_RxCpltCallback+0x1c8>)
 8000630:	2200      	movs	r2, #0
 8000632:	801a      	strh	r2, [r3, #0]
		Sum[0] =( Block[0] + RPiDataByte ) & 0xFF;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_UART_RxCpltCallback+0x1d0>)
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <HAL_UART_RxCpltCallback+0x1cc>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4413      	add	r3, r2
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <HAL_UART_RxCpltCallback+0x1f8>)
 8000642:	701a      	strb	r2, [r3, #0]
		memset(Block, 0, sizeof(Block));
 8000644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000648:	2100      	movs	r1, #0
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <HAL_UART_RxCpltCallback+0x1d0>)
 800064c:	f002 fd40 	bl	80030d0 <memset>
	}
	HAL_UART_Receive_IT(&huart1, &RPiDataByte, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	4907      	ldr	r1, [pc, #28]	; (8000670 <HAL_UART_RxCpltCallback+0x1cc>)
 8000654:	4812      	ldr	r0, [pc, #72]	; (80006a0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000656:	f001 fd9f 	bl	8002198 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart1, &RPiDataByte, 1);
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000538 	.word	0x20000538
 8000668:	40011000 	.word	0x40011000
 800066c:	20000528 	.word	0x20000528
 8000670:	20000124 	.word	0x20000124
 8000674:	20000128 	.word	0x20000128
 8000678:	2000052b 	.word	0x2000052b
 800067c:	20000004 	.word	0x20000004
 8000680:	20000008 	.word	0x20000008
 8000684:	2000052a 	.word	0x2000052a
 8000688:	2000000c 	.word	0x2000000c
 800068c:	20000530 	.word	0x20000530
 8000690:	20000536 	.word	0x20000536
 8000694:	08003c1c 	.word	0x08003c1c
 8000698:	08003c2c 	.word	0x08003c2c
 800069c:	2000052c 	.word	0x2000052c
 80006a0:	20000094 	.word	0x20000094

080006a4 <Firmware_Update>:
static void Firmware_Update(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	  while (1)
  {
			if(IlkSifre==10)
 80006a8:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <Firmware_Update+0xbc>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b0a      	cmp	r3, #10
 80006ae:	d10d      	bne.n	80006cc <Firmware_Update+0x28>
			{
				HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fabf 	bl	8000c34 <HAL_Delay>
				HAL_UART_Transmit_IT(&huart1,DataGonder, 1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	492a      	ldr	r1, [pc, #168]	; (8000764 <Firmware_Update+0xc0>)
 80006ba:	482b      	ldr	r0, [pc, #172]	; (8000768 <Firmware_Update+0xc4>)
 80006bc:	f001 fd37 	bl	800212e <HAL_UART_Transmit_IT>
				Index=0;
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <Firmware_Update+0xc8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	801a      	strh	r2, [r3, #0]
				IlkSifre=20;
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <Firmware_Update+0xbc>)
 80006c8:	2214      	movs	r2, #20
 80006ca:	701a      	strb	r2, [r3, #0]
			}
			if(IndexSum>0)
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <Firmware_Update+0xcc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00a      	beq.n	80006ea <Firmware_Update+0x46>
			{
				HAL_Delay(1);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 faad 	bl	8000c34 <HAL_Delay>
				HAL_UART_Transmit_IT(&huart1,Sum, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	4925      	ldr	r1, [pc, #148]	; (8000774 <Firmware_Update+0xd0>)
 80006de:	4822      	ldr	r0, [pc, #136]	; (8000768 <Firmware_Update+0xc4>)
 80006e0:	f001 fd25 	bl	800212e <HAL_UART_Transmit_IT>
				IndexSum=0;
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <Firmware_Update+0xcc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
			}
			DataFlagCount++;
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <Firmware_Update+0xd4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <Firmware_Update+0xd4>)
 80006f2:	6013      	str	r3, [r2, #0]
			if(DataFlagCount%10==0)HAL_GPIO_TogglePin(BLed_GPIO_Port, BLed_Pin);
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <Firmware_Update+0xd4>)
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	4b20      	ldr	r3, [pc, #128]	; (800077c <Firmware_Update+0xd8>)
 80006fa:	fba3 2301 	umull	r2, r3, r3, r1
 80006fe:	08da      	lsrs	r2, r3, #3
 8000700:	4613      	mov	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	1aca      	subs	r2, r1, r3
 800070a:	2a00      	cmp	r2, #0
 800070c:	d104      	bne.n	8000718 <Firmware_Update+0x74>
 800070e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000712:	481b      	ldr	r0, [pc, #108]	; (8000780 <Firmware_Update+0xdc>)
 8000714:	f001 f80e 	bl	8001734 <HAL_GPIO_TogglePin>
			HAL_Delay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 fa8b 	bl	8000c34 <HAL_Delay>
			if((current_app_size >= BlockLeng && (IlkSifre==20 && DataFlagCount>1000) )|| DataFlagCount>5000)
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <Firmware_Update+0xe0>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <Firmware_Update+0xe4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	429a      	cmp	r2, r3
 800072a:	d308      	bcc.n	800073e <Firmware_Update+0x9a>
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <Firmware_Update+0xbc>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b14      	cmp	r3, #20
 8000732:	d104      	bne.n	800073e <Firmware_Update+0x9a>
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <Firmware_Update+0xd4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800073c:	d805      	bhi.n	800074a <Firmware_Update+0xa6>
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <Firmware_Update+0xd4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f241 3288 	movw	r2, #5000	; 0x1388
 8000746:	4293      	cmp	r3, r2
 8000748:	d9ae      	bls.n	80006a8 <Firmware_Update+0x4>
			{
				HAL_UART_Transmit_IT(&huart1,Sum, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	4909      	ldr	r1, [pc, #36]	; (8000774 <Firmware_Update+0xd0>)
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <Firmware_Update+0xc4>)
 8000750:	f001 fced 	bl	800212e <HAL_UART_Transmit_IT>
				printf("Boot Finished...\r\n");
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <Firmware_Update+0xe8>)
 8000756:	f002 fbdb 	bl	8002f10 <puts>
				break;
 800075a:	bf00      	nop

			}
		}
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000052b 	.word	0x2000052b
 8000764:	20000000 	.word	0x20000000
 8000768:	20000094 	.word	0x20000094
 800076c:	20000528 	.word	0x20000528
 8000770:	20000530 	.word	0x20000530
 8000774:	2000052c 	.word	0x2000052c
 8000778:	20000538 	.word	0x20000538
 800077c:	cccccccd 	.word	0xcccccccd
 8000780:	40011000 	.word	0x40011000
 8000784:	20000536 	.word	0x20000536
 8000788:	20000008 	.word	0x20000008
 800078c:	08003c38 	.word	0x08003c38

08000790 <Application>:
static void Application( void )
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
	printf("Application...\n");
 8000796:	4810      	ldr	r0, [pc, #64]	; (80007d8 <Application+0x48>)
 8000798:	f002 fbba 	bl	8002f10 <puts>
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(ETX_APP_START_ADDRESS + 4U)));
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <Application+0x4c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	607b      	str	r3, [r7, #4]

	if( app_reset_handler == (void*)0xFFFFFFFF )
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a8:	d103      	bne.n	80007b2 <Application+0x22>
	{
	  printf("Invalid Application... HALT!!!\r\n");
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <Application+0x50>)
 80007ac:	f002 fbb0 	bl	8002f10 <puts>
	  while(1);
 80007b0:	e7fe      	b.n	80007b0 <Application+0x20>
	}

	__set_MSP(*(volatile uint32_t*) ETX_APP_START_ADDRESS);
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <Application+0x54>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	f383 8808 	msr	MSP, r3
}
 80007be:	bf00      	nop

	// Turn OFF the Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <Application+0x58>)
 80007c8:	f000 ff9c 	bl	8001704 <HAL_GPIO_WritePin>

	app_reset_handler();    //call the app reset handler
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4798      	blx	r3
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	08003c4c 	.word	0x08003c4c
 80007dc:	08004404 	.word	0x08004404
 80007e0:	08003c5c 	.word	0x08003c5c
 80007e4:	08004400 	.word	0x08004400
 80007e8:	40011000 	.word	0x40011000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_MspInit+0x5c>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_MspInit+0x5c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6193      	str	r3, [r2, #24]
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x5c>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x5c>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_MspInit+0x5c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_MspInit+0x5c>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_MspInit+0x60>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <HAL_MspInit+0x60>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000
 8000858:	40010000 	.word	0x40010000

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0318 	add.w	r3, r7, #24
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a3b      	ldr	r2, [pc, #236]	; (8000964 <HAL_UART_MspInit+0x108>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d13a      	bne.n	80008f2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800087c:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <HAL_UART_MspInit+0x10c>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a39      	ldr	r2, [pc, #228]	; (8000968 <HAL_UART_MspInit+0x10c>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b37      	ldr	r3, [pc, #220]	; (8000968 <HAL_UART_MspInit+0x10c>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b34      	ldr	r3, [pc, #208]	; (8000968 <HAL_UART_MspInit+0x10c>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a33      	ldr	r2, [pc, #204]	; (8000968 <HAL_UART_MspInit+0x10c>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b31      	ldr	r3, [pc, #196]	; (8000968 <HAL_UART_MspInit+0x10c>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0318 	add.w	r3, r7, #24
 80008be:	4619      	mov	r1, r3
 80008c0:	482a      	ldr	r0, [pc, #168]	; (800096c <HAL_UART_MspInit+0x110>)
 80008c2:	f000 fd9b 	bl	80013fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0318 	add.w	r3, r7, #24
 80008d8:	4619      	mov	r1, r3
 80008da:	4824      	ldr	r0, [pc, #144]	; (800096c <HAL_UART_MspInit+0x110>)
 80008dc:	f000 fd8e 	bl	80013fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2025      	movs	r0, #37	; 0x25
 80008e6:	f000 faa0 	bl	8000e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008ea:	2025      	movs	r0, #37	; 0x25
 80008ec:	f000 fab9 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f0:	e034      	b.n	800095c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <HAL_UART_MspInit+0x114>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d12f      	bne.n	800095c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_UART_MspInit+0x10c>)
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_UART_MspInit+0x10c>)
 8000902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000906:	61d3      	str	r3, [r2, #28]
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_UART_MspInit+0x10c>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_UART_MspInit+0x10c>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_UART_MspInit+0x10c>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_UART_MspInit+0x10c>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800092c:	2304      	movs	r3, #4
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	4619      	mov	r1, r3
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <HAL_UART_MspInit+0x110>)
 8000940:	f000 fd5c 	bl	80013fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000944:	2308      	movs	r3, #8
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 0318 	add.w	r3, r7, #24
 8000954:	4619      	mov	r1, r3
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_UART_MspInit+0x110>)
 8000958:	f000 fd50 	bl	80013fc <HAL_GPIO_Init>
}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40013800 	.word	0x40013800
 8000968:	40021000 	.word	0x40021000
 800096c:	40010800 	.word	0x40010800
 8000970:	40004400 	.word	0x40004400

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr

080009b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ba:	f000 f91f 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <USART1_IRQHandler+0x10>)
 80009ca:	f001 fc0b 	bl	80021e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000094 	.word	0x20000094

080009d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e00a      	b.n	8000a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ea:	f3af 8000 	nop.w
 80009ee:	4601      	mov	r1, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	b2ca      	uxtb	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf0      	blt.n	80009ea <_read+0x12>
  }

  return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e009      	b.n	8000a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fca1 	bl	8000374 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf1      	blt.n	8000a24 <_write+0x12>
  }
  return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a70:	605a      	str	r2, [r3, #4]
  return 0;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <_isatty>:

int _isatty(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr

08000a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
	...

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d207      	bcs.n	8000aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000adc:	f002 fb46 	bl	800316c <__errno>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	e009      	b.n	8000b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <_sbrk+0x64>)
 8000afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20005000 	.word	0x20005000
 8000b0c:	00000400 	.word	0x00000400
 8000b10:	2000053c 	.word	0x2000053c
 8000b14:	200006b8 	.word	0x200006b8

08000b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b24:	f7ff fff8 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b2a:	490c      	ldr	r1, [pc, #48]	; (8000b5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b2c:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b40:	4c09      	ldr	r4, [pc, #36]	; (8000b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f002 fb13 	bl	8003178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b52:	f7ff fafb 	bl	800014c <main>
  bx lr
 8000b56:	4770      	bx	lr
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b60:	08003ce4 	.word	0x08003ce4
  ldr r2, =_sbss
 8000b64:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b68:	200006b4 	.word	0x200006b4

08000b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_2_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x28>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x28>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f947 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f000 f808 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fe34 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x54>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x58>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f95f 	bl	8000e7e <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 f927 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <HAL_InitTick+0x5c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000010 	.word	0x20000010
 8000bf4:	20000018 	.word	0x20000018
 8000bf8:	20000014 	.word	0x20000014

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x20>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a03      	ldr	r2, [pc, #12]	; (8000c1c <HAL_IncTick+0x20>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	20000018 	.word	0x20000018
 8000c1c:	20000540 	.word	0x20000540

08000c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <HAL_GetTick+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000540 	.word	0x20000540

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff fff0 	bl	8000c20 <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_Delay+0x44>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffe0 	bl	8000c20 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000018 	.word	0x20000018

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4906      	ldr	r1, [pc, #24]	; (8000d14 <__NVIC_EnableIRQ+0x34>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f7ff ff90 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff2d 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff42 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff90 	bl	8000d6c <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5f 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff35 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffa2 	bl	8000dd0 <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d008      	beq.n	8000ec0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e020      	b.n	8000f02 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 020e 	bic.w	r2, r2, #14
 8000ece:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0201 	bic.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d005      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2204      	movs	r2, #4
 8000f28:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e051      	b.n	8000fd4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 020e 	bic.w	r2, r2, #14
 8000f3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0201 	bic.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <HAL_DMA_Abort_IT+0xd4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d029      	beq.n	8000fae <HAL_DMA_Abort_IT+0xa2>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <HAL_DMA_Abort_IT+0xd8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d022      	beq.n	8000faa <HAL_DMA_Abort_IT+0x9e>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <HAL_DMA_Abort_IT+0xdc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d01a      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x98>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <HAL_DMA_Abort_IT+0xe0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d012      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x92>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <HAL_DMA_Abort_IT+0xe4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00a      	beq.n	8000f98 <HAL_DMA_Abort_IT+0x8c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <HAL_DMA_Abort_IT+0xe8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d102      	bne.n	8000f92 <HAL_DMA_Abort_IT+0x86>
 8000f8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f90:	e00e      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000f92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f96:	e00b      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9c:	e008      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa2:	e005      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa8:	e002      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000faa:	2310      	movs	r3, #16
 8000fac:	e000      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <HAL_DMA_Abort_IT+0xec>)
 8000fb2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4798      	blx	r3
    } 
  }
  return status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020008 	.word	0x40020008
 8000fe4:	4002001c 	.word	0x4002001c
 8000fe8:	40020030 	.word	0x40020030
 8000fec:	40020044 	.word	0x40020044
 8000ff0:	40020058 	.word	0x40020058
 8000ff4:	4002006c 	.word	0x4002006c
 8000ff8:	40020000 	.word	0x40020000

08000ffc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_FLASH_Program+0xd8>)
 8001018:	7e1b      	ldrb	r3, [r3, #24]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_FLASH_Program+0x26>
 800101e:	2302      	movs	r3, #2
 8001020:	e054      	b.n	80010cc <HAL_FLASH_Program+0xd0>
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_FLASH_Program+0xd8>)
 8001024:	2201      	movs	r2, #1
 8001026:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001028:	f24c 3050 	movw	r0, #50000	; 0xc350
 800102c:	f000 f8a8 	bl	8001180 <FLASH_WaitForLastOperation>
 8001030:	4603      	mov	r3, r0
 8001032:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d144      	bne.n	80010c4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d102      	bne.n	8001046 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001040:	2301      	movs	r3, #1
 8001042:	757b      	strb	r3, [r7, #21]
 8001044:	e007      	b.n	8001056 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d102      	bne.n	8001052 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800104c:	2302      	movs	r3, #2
 800104e:	757b      	strb	r3, [r7, #21]
 8001050:	e001      	b.n	8001056 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001052:	2304      	movs	r3, #4
 8001054:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001056:	2300      	movs	r3, #0
 8001058:	75bb      	strb	r3, [r7, #22]
 800105a:	e02d      	b.n	80010b8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800105c:	7dbb      	ldrb	r3, [r7, #22]
 800105e:	005a      	lsls	r2, r3, #1
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	eb02 0c03 	add.w	ip, r2, r3
 8001066:	7dbb      	ldrb	r3, [r7, #22]
 8001068:	0119      	lsls	r1, r3, #4
 800106a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800106e:	f1c1 0620 	rsb	r6, r1, #32
 8001072:	f1a1 0020 	sub.w	r0, r1, #32
 8001076:	fa22 f401 	lsr.w	r4, r2, r1
 800107a:	fa03 f606 	lsl.w	r6, r3, r6
 800107e:	4334      	orrs	r4, r6
 8001080:	fa23 f000 	lsr.w	r0, r3, r0
 8001084:	4304      	orrs	r4, r0
 8001086:	fa23 f501 	lsr.w	r5, r3, r1
 800108a:	b2a3      	uxth	r3, r4
 800108c:	4619      	mov	r1, r3
 800108e:	4660      	mov	r0, ip
 8001090:	f000 f85a 	bl	8001148 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001094:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001098:	f000 f872 	bl	8001180 <FLASH_WaitForLastOperation>
 800109c:	4603      	mov	r3, r0
 800109e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_FLASH_Program+0xdc>)
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HAL_FLASH_Program+0xdc>)
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d107      	bne.n	80010c2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80010b2:	7dbb      	ldrb	r3, [r7, #22]
 80010b4:	3301      	adds	r3, #1
 80010b6:	75bb      	strb	r3, [r7, #22]
 80010b8:	7dba      	ldrb	r2, [r7, #22]
 80010ba:	7d7b      	ldrb	r3, [r7, #21]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d3cd      	bcc.n	800105c <HAL_FLASH_Program+0x60>
 80010c0:	e000      	b.n	80010c4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80010c2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_FLASH_Program+0xd8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	761a      	strb	r2, [r3, #24]

  return status;
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d4:	20000548 	.word	0x20000548
 80010d8:	40022000 	.word	0x40022000

080010dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_FLASH_Unlock+0x40>)
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00d      	beq.n	800110e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_FLASH_Unlock+0x40>)
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_FLASH_Unlock+0x44>)
 80010f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_FLASH_Unlock+0x40>)
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_FLASH_Unlock+0x48>)
 80010fc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_FLASH_Unlock+0x40>)
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800110e:	79fb      	ldrb	r3, [r7, #7]
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40022000 	.word	0x40022000
 8001120:	45670123 	.word	0x45670123
 8001124:	cdef89ab 	.word	0xcdef89ab

08001128 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_FLASH_Lock+0x1c>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_FLASH_Lock+0x1c>)
 8001132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001136:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000

08001148 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <FLASH_Program_HalfWord+0x30>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <FLASH_Program_HalfWord+0x34>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <FLASH_Program_HalfWord+0x34>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	887a      	ldrh	r2, [r7, #2]
 800116a:	801a      	strh	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000548 	.word	0x20000548
 800117c:	40022000 	.word	0x40022000

08001180 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff fd4a 	bl	8000c20 <HAL_GetTick>
 800118c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800118e:	e010      	b.n	80011b2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001196:	d00c      	beq.n	80011b2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <FLASH_WaitForLastOperation+0x2e>
 800119e:	f7ff fd3f 	bl	8000c20 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d201      	bcs.n	80011b2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e025      	b.n	80011fe <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <FLASH_WaitForLastOperation+0x88>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1e8      	bne.n	8001190 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <FLASH_WaitForLastOperation+0x88>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <FLASH_WaitForLastOperation+0x88>)
 80011cc:	2220      	movs	r2, #32
 80011ce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <FLASH_WaitForLastOperation+0x88>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10b      	bne.n	80011f4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <FLASH_WaitForLastOperation+0x88>)
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d105      	bne.n	80011f4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <FLASH_WaitForLastOperation+0x88>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80011f4:	f000 f80a 	bl	800120c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40022000 	.word	0x40022000

0800120c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <FLASH_SetErrorCode+0x98>)
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	2b00      	cmp	r3, #0
 8001220:	d009      	beq.n	8001236 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <FLASH_SetErrorCode+0x9c>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <FLASH_SetErrorCode+0x9c>)
 800122c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f043 0310 	orr.w	r3, r3, #16
 8001234:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <FLASH_SetErrorCode+0x98>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <FLASH_SetErrorCode+0x9c>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <FLASH_SetErrorCode+0x9c>)
 800124c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <FLASH_SetErrorCode+0x98>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <FLASH_SetErrorCode+0x9c>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <FLASH_SetErrorCode+0x9c>)
 800126c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <FLASH_SetErrorCode+0x98>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <FLASH_SetErrorCode+0x98>)
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f240 1201 	movw	r2, #257	; 0x101
 8001280:	4293      	cmp	r3, r2
 8001282:	d106      	bne.n	8001292 <FLASH_SetErrorCode+0x86>
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <FLASH_SetErrorCode+0x98>)
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <FLASH_SetErrorCode+0x98>)
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	61d3      	str	r3, [r2, #28]
}  
 8001290:	e002      	b.n	8001298 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <FLASH_SetErrorCode+0x98>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	60d3      	str	r3, [r2, #12]
}  
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40022000 	.word	0x40022000
 80012a8:	20000548 	.word	0x20000548

080012ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <HAL_FLASHEx_Erase+0xd0>)
 80012c0:	7e1b      	ldrb	r3, [r3, #24]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_FLASHEx_Erase+0x1e>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e053      	b.n	8001372 <HAL_FLASHEx_Erase+0xc6>
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <HAL_FLASHEx_Erase+0xd0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d116      	bne.n	8001306 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012dc:	f7ff ff50 	bl	8001180 <FLASH_WaitForLastOperation>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d141      	bne.n	800136a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80012e6:	2001      	movs	r0, #1
 80012e8:	f000 f84c 	bl	8001384 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012f0:	f7ff ff46 	bl	8001180 <FLASH_WaitForLastOperation>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80012f8:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_FLASHEx_Erase+0xd4>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	4a20      	ldr	r2, [pc, #128]	; (8001380 <HAL_FLASHEx_Erase+0xd4>)
 80012fe:	f023 0304 	bic.w	r3, r3, #4
 8001302:	6113      	str	r3, [r2, #16]
 8001304:	e031      	b.n	800136a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001306:	f24c 3050 	movw	r0, #50000	; 0xc350
 800130a:	f7ff ff39 	bl	8001180 <FLASH_WaitForLastOperation>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d12a      	bne.n	800136a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f04f 32ff 	mov.w	r2, #4294967295
 800131a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	e019      	b.n	8001358 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001324:	68b8      	ldr	r0, [r7, #8]
 8001326:	f000 f849 	bl	80013bc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800132a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800132e:	f7ff ff27 	bl	8001180 <FLASH_WaitForLastOperation>
 8001332:	4603      	mov	r3, r0
 8001334:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_FLASHEx_Erase+0xd4>)
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <HAL_FLASHEx_Erase+0xd4>)
 800133c:	f023 0302 	bic.w	r3, r3, #2
 8001340:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	601a      	str	r2, [r3, #0]
            break;
 800134e:	e00c      	b.n	800136a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001356:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	029a      	lsls	r2, r3, #10
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	4413      	add	r3, r2
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	429a      	cmp	r2, r3
 8001368:	d3dc      	bcc.n	8001324 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_FLASHEx_Erase+0xd0>)
 800136c:	2200      	movs	r2, #0
 800136e:	761a      	strb	r2, [r3, #24]

  return status;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000548 	.word	0x20000548
 8001380:	40022000 	.word	0x40022000

08001384 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <FLASH_MassErase+0x30>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <FLASH_MassErase+0x34>)
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <FLASH_MassErase+0x34>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <FLASH_MassErase+0x34>)
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <FLASH_MassErase+0x34>)
 80013a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000548 	.word	0x20000548
 80013b8:	40022000 	.word	0x40022000

080013bc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <FLASH_PageErase+0x38>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <FLASH_PageErase+0x3c>)
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <FLASH_PageErase+0x3c>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <FLASH_PageErase+0x3c>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <FLASH_PageErase+0x3c>)
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <FLASH_PageErase+0x3c>)
 80013e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000548 	.word	0x20000548
 80013f8:	40022000 	.word	0x40022000

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b08b      	sub	sp, #44	; 0x2c
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140e:	e169      	b.n	80016e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001410:	2201      	movs	r2, #1
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	69fa      	ldr	r2, [r7, #28]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 8158 	bne.w	80016de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a9a      	ldr	r2, [pc, #616]	; (800169c <HAL_GPIO_Init+0x2a0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d05e      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001438:	4a98      	ldr	r2, [pc, #608]	; (800169c <HAL_GPIO_Init+0x2a0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d875      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800143e:	4a98      	ldr	r2, [pc, #608]	; (80016a0 <HAL_GPIO_Init+0x2a4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d058      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001444:	4a96      	ldr	r2, [pc, #600]	; (80016a0 <HAL_GPIO_Init+0x2a4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d86f      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800144a:	4a96      	ldr	r2, [pc, #600]	; (80016a4 <HAL_GPIO_Init+0x2a8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d052      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001450:	4a94      	ldr	r2, [pc, #592]	; (80016a4 <HAL_GPIO_Init+0x2a8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d869      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001456:	4a94      	ldr	r2, [pc, #592]	; (80016a8 <HAL_GPIO_Init+0x2ac>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d04c      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 800145c:	4a92      	ldr	r2, [pc, #584]	; (80016a8 <HAL_GPIO_Init+0x2ac>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d863      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001462:	4a92      	ldr	r2, [pc, #584]	; (80016ac <HAL_GPIO_Init+0x2b0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d046      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001468:	4a90      	ldr	r2, [pc, #576]	; (80016ac <HAL_GPIO_Init+0x2b0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d85d      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800146e:	2b12      	cmp	r3, #18
 8001470:	d82a      	bhi.n	80014c8 <HAL_GPIO_Init+0xcc>
 8001472:	2b12      	cmp	r3, #18
 8001474:	d859      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001476:	a201      	add	r2, pc, #4	; (adr r2, 800147c <HAL_GPIO_Init+0x80>)
 8001478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147c:	080014f7 	.word	0x080014f7
 8001480:	080014d1 	.word	0x080014d1
 8001484:	080014e3 	.word	0x080014e3
 8001488:	08001525 	.word	0x08001525
 800148c:	0800152b 	.word	0x0800152b
 8001490:	0800152b 	.word	0x0800152b
 8001494:	0800152b 	.word	0x0800152b
 8001498:	0800152b 	.word	0x0800152b
 800149c:	0800152b 	.word	0x0800152b
 80014a0:	0800152b 	.word	0x0800152b
 80014a4:	0800152b 	.word	0x0800152b
 80014a8:	0800152b 	.word	0x0800152b
 80014ac:	0800152b 	.word	0x0800152b
 80014b0:	0800152b 	.word	0x0800152b
 80014b4:	0800152b 	.word	0x0800152b
 80014b8:	0800152b 	.word	0x0800152b
 80014bc:	0800152b 	.word	0x0800152b
 80014c0:	080014d9 	.word	0x080014d9
 80014c4:	080014ed 	.word	0x080014ed
 80014c8:	4a79      	ldr	r2, [pc, #484]	; (80016b0 <HAL_GPIO_Init+0x2b4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ce:	e02c      	b.n	800152a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e029      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	3304      	adds	r3, #4
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e024      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	3308      	adds	r3, #8
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e01f      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	330c      	adds	r3, #12
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	e01a      	b.n	800152c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014fe:	2304      	movs	r3, #4
 8001500:	623b      	str	r3, [r7, #32]
          break;
 8001502:	e013      	b.n	800152c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800150c:	2308      	movs	r3, #8
 800150e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	611a      	str	r2, [r3, #16]
          break;
 8001516:	e009      	b.n	800152c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001518:	2308      	movs	r3, #8
 800151a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	615a      	str	r2, [r3, #20]
          break;
 8001522:	e003      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x130>
          break;
 800152a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2bff      	cmp	r3, #255	; 0xff
 8001530:	d801      	bhi.n	8001536 <HAL_GPIO_Init+0x13a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	e001      	b.n	800153a <HAL_GPIO_Init+0x13e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3304      	adds	r3, #4
 800153a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2bff      	cmp	r3, #255	; 0xff
 8001540:	d802      	bhi.n	8001548 <HAL_GPIO_Init+0x14c>
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	e002      	b.n	800154e <HAL_GPIO_Init+0x152>
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	3b08      	subs	r3, #8
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	210f      	movs	r1, #15
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	401a      	ands	r2, r3
 8001560:	6a39      	ldr	r1, [r7, #32]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	431a      	orrs	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80b1 	beq.w	80016de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800157c:	4b4d      	ldr	r3, [pc, #308]	; (80016b4 <HAL_GPIO_Init+0x2b8>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a4c      	ldr	r2, [pc, #304]	; (80016b4 <HAL_GPIO_Init+0x2b8>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <HAL_GPIO_Init+0x2b8>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001594:	4a48      	ldr	r2, [pc, #288]	; (80016b8 <HAL_GPIO_Init+0x2bc>)
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a40      	ldr	r2, [pc, #256]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d013      	beq.n	80015e8 <HAL_GPIO_Init+0x1ec>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a3f      	ldr	r2, [pc, #252]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d00d      	beq.n	80015e4 <HAL_GPIO_Init+0x1e8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3e      	ldr	r2, [pc, #248]	; (80016c4 <HAL_GPIO_Init+0x2c8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d007      	beq.n	80015e0 <HAL_GPIO_Init+0x1e4>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a3d      	ldr	r2, [pc, #244]	; (80016c8 <HAL_GPIO_Init+0x2cc>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d101      	bne.n	80015dc <HAL_GPIO_Init+0x1e0>
 80015d8:	2303      	movs	r3, #3
 80015da:	e006      	b.n	80015ea <HAL_GPIO_Init+0x1ee>
 80015dc:	2304      	movs	r3, #4
 80015de:	e004      	b.n	80015ea <HAL_GPIO_Init+0x1ee>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0x1ee>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_GPIO_Init+0x1ee>
 80015e8:	2300      	movs	r3, #0
 80015ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ec:	f002 0203 	and.w	r2, r2, #3
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015fa:	492f      	ldr	r1, [pc, #188]	; (80016b8 <HAL_GPIO_Init+0x2bc>)
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001614:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	492c      	ldr	r1, [pc, #176]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	608b      	str	r3, [r1, #8]
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	43db      	mvns	r3, r3
 800162a:	4928      	ldr	r1, [pc, #160]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 800162c:	4013      	ands	r3, r2
 800162e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d006      	beq.n	800164a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	4922      	ldr	r1, [pc, #136]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	60cb      	str	r3, [r1, #12]
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	43db      	mvns	r3, r3
 8001652:	491e      	ldr	r1, [pc, #120]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 8001654:	4013      	ands	r3, r2
 8001656:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4918      	ldr	r1, [pc, #96]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	43db      	mvns	r3, r3
 800167a:	4914      	ldr	r1, [pc, #80]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 800167c:	4013      	ands	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d021      	beq.n	80016d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	490e      	ldr	r1, [pc, #56]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
 8001698:	e021      	b.n	80016de <HAL_GPIO_Init+0x2e2>
 800169a:	bf00      	nop
 800169c:	10320000 	.word	0x10320000
 80016a0:	10310000 	.word	0x10310000
 80016a4:	10220000 	.word	0x10220000
 80016a8:	10210000 	.word	0x10210000
 80016ac:	10120000 	.word	0x10120000
 80016b0:	10110000 	.word	0x10110000
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40010800 	.word	0x40010800
 80016c0:	40010c00 	.word	0x40010c00
 80016c4:	40011000 	.word	0x40011000
 80016c8:	40011400 	.word	0x40011400
 80016cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_GPIO_Init+0x304>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	4909      	ldr	r1, [pc, #36]	; (8001700 <HAL_GPIO_Init+0x304>)
 80016da:	4013      	ands	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	3301      	adds	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f47f ae8e 	bne.w	8001410 <HAL_GPIO_Init+0x14>
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	372c      	adds	r7, #44	; 0x2c
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001720:	e003      	b.n	800172a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	041a      	lsls	r2, r3, #16
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	611a      	str	r2, [r3, #16]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	041a      	lsls	r2, r3, #16
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43d9      	mvns	r1, r3
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	400b      	ands	r3, r1
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	611a      	str	r2, [r3, #16]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e272      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8087 	beq.w	8001896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001788:	4b92      	ldr	r3, [pc, #584]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b04      	cmp	r3, #4
 8001792:	d00c      	beq.n	80017ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001794:	4b8f      	ldr	r3, [pc, #572]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d112      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
 80017a0:	4b8c      	ldr	r3, [pc, #560]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d10b      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ae:	4b89      	ldr	r3, [pc, #548]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d06c      	beq.n	8001894 <HAL_RCC_OscConfig+0x12c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d168      	bne.n	8001894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e24c      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x76>
 80017d0:	4b80      	ldr	r3, [pc, #512]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a7f      	ldr	r2, [pc, #508]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e02e      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x98>
 80017e6:	4b7b      	ldr	r3, [pc, #492]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7a      	ldr	r2, [pc, #488]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b78      	ldr	r3, [pc, #480]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a77      	ldr	r2, [pc, #476]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e01d      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0xbc>
 800180a:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a71      	ldr	r2, [pc, #452]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b6f      	ldr	r3, [pc, #444]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a6e      	ldr	r2, [pc, #440]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001824:	4b6b      	ldr	r3, [pc, #428]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a6a      	ldr	r2, [pc, #424]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800182a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a67      	ldr	r2, [pc, #412]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff f9ec 	bl	8000c20 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff f9e8 	bl	8000c20 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e200      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b5d      	ldr	r3, [pc, #372]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0xe4>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff f9d8 	bl	8000c20 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff f9d4 	bl	8000c20 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1ec      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x10c>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d063      	beq.n	800196a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a2:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ae:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d11c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
 80018ba:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d116      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e1c0      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4939      	ldr	r1, [pc, #228]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	e03a      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fc:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_RCC_OscConfig+0x270>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff f98d 	bl	8000c20 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff f989 	bl	8000c20 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1a1      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4927      	ldr	r1, [pc, #156]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_RCC_OscConfig+0x270>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff f96c 	bl	8000c20 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff f968 	bl	8000c20 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e180      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d03a      	beq.n	80019ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d019      	beq.n	80019b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_RCC_OscConfig+0x274>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff f94c 	bl	8000c20 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff f948 	bl	8000c20 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e160      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f000 face 	bl	8001f4c <RCC_Delay>
 80019b0:	e01c      	b.n	80019ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_RCC_OscConfig+0x274>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff f932 	bl	8000c20 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019be:	e00f      	b.n	80019e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff f92e 	bl	8000c20 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d908      	bls.n	80019e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e146      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	42420000 	.word	0x42420000
 80019dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b92      	ldr	r3, [pc, #584]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e9      	bne.n	80019c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a6 	beq.w	8001b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b8b      	ldr	r3, [pc, #556]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b88      	ldr	r3, [pc, #544]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a87      	ldr	r2, [pc, #540]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b85      	ldr	r3, [pc, #532]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a22:	2301      	movs	r3, #1
 8001a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b82      	ldr	r3, [pc, #520]	; (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a32:	4b7f      	ldr	r3, [pc, #508]	; (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a7e      	ldr	r2, [pc, #504]	; (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f8ef 	bl	8000c20 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a46:	f7ff f8eb 	bl	8000c20 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b64      	cmp	r3, #100	; 0x64
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e103      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	4b75      	ldr	r3, [pc, #468]	; (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x312>
 8001a6c:	4b6f      	ldr	r3, [pc, #444]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a6e      	ldr	r2, [pc, #440]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	e02d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x334>
 8001a82:	4b6a      	ldr	r3, [pc, #424]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4a69      	ldr	r2, [pc, #420]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	6213      	str	r3, [r2, #32]
 8001a8e:	4b67      	ldr	r3, [pc, #412]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a66      	ldr	r2, [pc, #408]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	e01c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d10c      	bne.n	8001abe <HAL_RCC_OscConfig+0x356>
 8001aa4:	4b61      	ldr	r3, [pc, #388]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a60      	ldr	r2, [pc, #384]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	4b5e      	ldr	r3, [pc, #376]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a5d      	ldr	r2, [pc, #372]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	e00b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001abe:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a5a      	ldr	r2, [pc, #360]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	4b58      	ldr	r3, [pc, #352]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d015      	beq.n	8001b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff f89f 	bl	8000c20 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff f89b 	bl	8000c20 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0b1      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ee      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x37e>
 8001b08:	e014      	b.n	8001b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f889 	bl	8000c20 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff f885 	bl	8000c20 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e09b      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b28:	4b40      	ldr	r3, [pc, #256]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ee      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d105      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a3b      	ldr	r2, [pc, #236]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8087 	beq.w	8001c5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d061      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d146      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f859 	bl	8000c20 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff f855 	bl	8000c20 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e06d      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b84:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	4921      	ldr	r1, [pc, #132]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a19      	ldr	r1, [r3, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	491b      	ldr	r1, [pc, #108]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_RCC_OscConfig+0x4cc>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff f829 	bl	8000c20 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f825 	bl	8000c20 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e03d      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x46a>
 8001bf0:	e035      	b.n	8001c5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_RCC_OscConfig+0x4cc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f812 	bl	8000c20 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f80e 	bl	8000c20 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e026      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x498>
 8001c1e:	e01e      	b.n	8001c5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e019      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40007000 	.word	0x40007000
 8001c34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_OscConfig+0x500>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0d0      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c80:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d910      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 0207 	bic.w	r2, r3, #7
 8001c96:	4965      	ldr	r1, [pc, #404]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b63      	ldr	r3, [pc, #396]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0b8      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d020      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc8:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a58      	ldr	r2, [pc, #352]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce0:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a52      	ldr	r2, [pc, #328]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cec:	4b50      	ldr	r3, [pc, #320]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	494d      	ldr	r1, [pc, #308]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d040      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d115      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e07f      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e073      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e06b      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4a:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f023 0203 	bic.w	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4936      	ldr	r1, [pc, #216]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d5c:	f7fe ff60 	bl	8000c20 <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7fe ff5c 	bl	8000c20 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e053      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 020c 	and.w	r2, r3, #12
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d1eb      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d210      	bcs.n	8001dbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 0207 	bic.w	r2, r3, #7
 8001da2:	4922      	ldr	r1, [pc, #136]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e032      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4916      	ldr	r1, [pc, #88]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	490e      	ldr	r1, [pc, #56]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dfa:	f000 f821 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	490a      	ldr	r1, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0c:	5ccb      	ldrb	r3, [r1, r3]
 8001e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1cc>)
 8001e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1d0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe febe 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	08003c7c 	.word	0x08003c7c
 8001e38:	20000010 	.word	0x20000010
 8001e3c:	20000014 	.word	0x20000014

08001e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d002      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x30>
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0x36>
 8001e6e:	e027      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e72:	613b      	str	r3, [r7, #16]
      break;
 8001e74:	e027      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	0c9b      	lsrs	r3, r3, #18
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	4a17      	ldr	r2, [pc, #92]	; (8001edc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e80:	5cd3      	ldrb	r3, [r2, r3]
 8001e82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d010      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	0c5b      	lsrs	r3, r3, #17
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ea2:	fb03 f202 	mul.w	r2, r3, r2
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e004      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	613b      	str	r3, [r7, #16]
      break;
 8001ebe:	e002      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ec2:	613b      	str	r3, [r7, #16]
      break;
 8001ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec6:	693b      	ldr	r3, [r7, #16]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	007a1200 	.word	0x007a1200
 8001edc:	08003c94 	.word	0x08003c94
 8001ee0:	08003ca4 	.word	0x08003ca4
 8001ee4:	003d0900 	.word	0x003d0900

08001ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eec:	4b02      	ldr	r3, [pc, #8]	; (8001ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	20000010 	.word	0x20000010

08001efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f00:	f7ff fff2 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4903      	ldr	r1, [pc, #12]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	08003c8c 	.word	0x08003c8c

08001f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f28:	f7ff ffde 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	0adb      	lsrs	r3, r3, #11
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4903      	ldr	r1, [pc, #12]	; (8001f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08003c8c 	.word	0x08003c8c

08001f4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <RCC_Delay+0x34>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <RCC_Delay+0x38>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0a5b      	lsrs	r3, r3, #9
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f68:	bf00      	nop
  }
  while (Delay --);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1e5a      	subs	r2, r3, #1
 8001f6e:	60fa      	str	r2, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f9      	bne.n	8001f68 <RCC_Delay+0x1c>
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	20000010 	.word	0x20000010
 8001f84:	10624dd3 	.word	0x10624dd3

08001f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e042      	b.n	8002020 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe fc54 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2224      	movs	r2, #36	; 0x24
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fdfb 	bl	8002bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af02      	add	r7, sp, #8
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	4613      	mov	r3, r2
 8002036:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b20      	cmp	r3, #32
 8002046:	d16d      	bne.n	8002124 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <HAL_UART_Transmit+0x2c>
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e066      	b.n	8002126 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2221      	movs	r2, #33	; 0x21
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002066:	f7fe fddb 	bl	8000c20 <HAL_GetTick>
 800206a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	88fa      	ldrh	r2, [r7, #6]
 8002076:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002080:	d108      	bne.n	8002094 <HAL_UART_Transmit+0x6c>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d104      	bne.n	8002094 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	e003      	b.n	800209c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800209c:	e02a      	b.n	80020f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2200      	movs	r2, #0
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fb4a 	bl	8002742 <UART_WaitOnFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e036      	b.n	8002126 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10b      	bne.n	80020d6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	3302      	adds	r3, #2
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	e007      	b.n	80020e6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	3301      	adds	r3, #1
 80020e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1cf      	bne.n	800209e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2200      	movs	r2, #0
 8002106:	2140      	movs	r1, #64	; 0x40
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fb1a 	bl	8002742 <UART_WaitOnFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e006      	b.n	8002126 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	4613      	mov	r3, r2
 800213a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b20      	cmp	r3, #32
 8002146:	d121      	bne.n	800218c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_UART_Transmit_IT+0x26>
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e01a      	b.n	800218e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	88fa      	ldrh	r2, [r7, #6]
 8002162:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	88fa      	ldrh	r2, [r7, #6]
 8002168:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2221      	movs	r2, #33	; 0x21
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002186:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	4613      	mov	r3, r2
 80021a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d112      	bne.n	80021d8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_UART_Receive_IT+0x26>
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00b      	b.n	80021da <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fb25 	bl	800281e <UART_Start_Receive_IT>
 80021d4:	4603      	mov	r3, r0
 80021d6:	e000      	b.n	80021da <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b0ba      	sub	sp, #232	; 0xe8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10f      	bne.n	800224a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800222a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_UART_IRQHandler+0x66>
 8002236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fc01 	bl	8002a4a <UART_Receive_IT>
      return;
 8002248:	e25b      	b.n	8002702 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800224a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80de 	beq.w	8002410 <HAL_UART_IRQHandler+0x22c>
 8002254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002264:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80d1 	beq.w	8002410 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800226e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_UART_IRQHandler+0xae>
 800227a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_UART_IRQHandler+0xd2>
 800229e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f043 0202 	orr.w	r2, r3, #2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_UART_IRQHandler+0xf6>
 80022c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	f043 0204 	orr.w	r2, r3, #4
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d011      	beq.n	800230a <HAL_UART_IRQHandler+0x126>
 80022e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f043 0208 	orr.w	r2, r3, #8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 81f2 	beq.w	80026f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_UART_IRQHandler+0x14e>
 8002320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fb8c 	bl	8002a4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf14      	ite	ne
 8002340:	2301      	movne	r3, #1
 8002342:	2300      	moveq	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d103      	bne.n	800235e <HAL_UART_IRQHandler+0x17a>
 8002356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d04f      	beq.n	80023fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa96 	bl	8002890 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d041      	beq.n	80023f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3314      	adds	r3, #20
 8002378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002380:	e853 3f00 	ldrex	r3, [r3]
 8002384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800238c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3314      	adds	r3, #20
 800239a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800239e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023ae:	e841 2300 	strex	r3, r2, [r1]
 80023b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1d9      	bne.n	8002372 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d013      	beq.n	80023ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	4a7e      	ldr	r2, [pc, #504]	; (80025c4 <HAL_UART_IRQHandler+0x3e0>)
 80023cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fd9a 	bl	8000f0c <HAL_DMA_Abort_IT>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023e8:	4610      	mov	r0, r2
 80023ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ec:	e00e      	b.n	800240c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f993 	bl	800271a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f4:	e00a      	b.n	800240c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f98f 	bl	800271a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023fc:	e006      	b.n	800240c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f98b 	bl	800271a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800240a:	e175      	b.n	80026f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800240c:	bf00      	nop
    return;
 800240e:	e173      	b.n	80026f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	2b01      	cmp	r3, #1
 8002416:	f040 814f 	bne.w	80026b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800241a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8148 	beq.w	80026b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8141 	beq.w	80026b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80b6 	beq.w	80025c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8145 	beq.w	80026fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800247a:	429a      	cmp	r2, r3
 800247c:	f080 813e 	bcs.w	80026fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002486:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b20      	cmp	r3, #32
 8002490:	f000 8088 	beq.w	80025a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	330c      	adds	r3, #12
 800249a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024a2:	e853 3f00 	ldrex	r3, [r3]
 80024a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	330c      	adds	r3, #12
 80024bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024c0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80024cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024d0:	e841 2300 	strex	r3, r2, [r1]
 80024d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1d9      	bne.n	8002494 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3314      	adds	r3, #20
 80024e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ea:	e853 3f00 	ldrex	r3, [r3]
 80024ee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3314      	adds	r3, #20
 8002500:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002504:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002508:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800250c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002510:	e841 2300 	strex	r3, r2, [r1]
 8002514:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e1      	bne.n	80024e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3314      	adds	r3, #20
 8002522:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002526:	e853 3f00 	ldrex	r3, [r3]
 800252a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800252c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3314      	adds	r3, #20
 800253c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002540:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002542:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002544:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002546:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002548:	e841 2300 	strex	r3, r2, [r1]
 800254c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800254e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e3      	bne.n	800251c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	330c      	adds	r3, #12
 8002568:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800256c:	e853 3f00 	ldrex	r3, [r3]
 8002570:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002574:	f023 0310 	bic.w	r3, r3, #16
 8002578:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	330c      	adds	r3, #12
 8002582:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002586:	65ba      	str	r2, [r7, #88]	; 0x58
 8002588:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800258c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800258e:	e841 2300 	strex	r3, r2, [r1]
 8002592:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1e3      	bne.n	8002562 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fc79 	bl	8000e96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8b6 	bl	800272c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025c0:	e09c      	b.n	80026fc <HAL_UART_IRQHandler+0x518>
 80025c2:	bf00      	nop
 80025c4:	08002955 	.word	0x08002955
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 808e 	beq.w	8002700 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80025e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8089 	beq.w	8002700 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	330c      	adds	r3, #12
 80025f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f8:	e853 3f00 	ldrex	r3, [r3]
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002604:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	330c      	adds	r3, #12
 800260e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002612:	647a      	str	r2, [r7, #68]	; 0x44
 8002614:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002616:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800261a:	e841 2300 	strex	r3, r2, [r1]
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1e3      	bne.n	80025ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3314      	adds	r3, #20
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	e853 3f00 	ldrex	r3, [r3]
 8002634:	623b      	str	r3, [r7, #32]
   return(result);
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3314      	adds	r3, #20
 8002646:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800264a:	633a      	str	r2, [r7, #48]	; 0x30
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002652:	e841 2300 	strex	r3, r2, [r1]
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1e3      	bne.n	8002626 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	330c      	adds	r3, #12
 8002672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	e853 3f00 	ldrex	r3, [r3]
 800267a:	60fb      	str	r3, [r7, #12]
   return(result);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0310 	bic.w	r3, r3, #16
 8002682:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002690:	61fa      	str	r2, [r7, #28]
 8002692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002694:	69b9      	ldr	r1, [r7, #24]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	e841 2300 	strex	r3, r2, [r1]
 800269c:	617b      	str	r3, [r7, #20]
   return(result);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e3      	bne.n	800266c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026ae:	4619      	mov	r1, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f83b 	bl	800272c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026b6:	e023      	b.n	8002700 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <HAL_UART_IRQHandler+0x4f4>
 80026c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f953 	bl	800297c <UART_Transmit_IT>
    return;
 80026d6:	e014      	b.n	8002702 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00e      	beq.n	8002702 <HAL_UART_IRQHandler+0x51e>
 80026e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f992 	bl	8002a1a <UART_EndTransmit_IT>
    return;
 80026f6:	e004      	b.n	8002702 <HAL_UART_IRQHandler+0x51e>
    return;
 80026f8:	bf00      	nop
 80026fa:	e002      	b.n	8002702 <HAL_UART_IRQHandler+0x51e>
      return;
 80026fc:	bf00      	nop
 80026fe:	e000      	b.n	8002702 <HAL_UART_IRQHandler+0x51e>
      return;
 8002700:	bf00      	nop
  }
}
 8002702:	37e8      	adds	r7, #232	; 0xe8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b090      	sub	sp, #64	; 0x40
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4613      	mov	r3, r2
 8002750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002752:	e050      	b.n	80027f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275a:	d04c      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800275c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <UART_WaitOnFlagUntilTimeout+0x30>
 8002762:	f7fe fa5d 	bl	8000c20 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800276e:	429a      	cmp	r2, r3
 8002770:	d241      	bcs.n	80027f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	330c      	adds	r3, #12
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	330c      	adds	r3, #12
 8002790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002792:	637a      	str	r2, [r7, #52]	; 0x34
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800279a:	e841 2300 	strex	r3, r2, [r1]
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e5      	bne.n	8002772 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3314      	adds	r3, #20
 80027ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	e853 3f00 	ldrex	r3, [r3]
 80027b4:	613b      	str	r3, [r7, #16]
   return(result);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3314      	adds	r3, #20
 80027c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027c6:	623a      	str	r2, [r7, #32]
 80027c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ca:	69f9      	ldr	r1, [r7, #28]
 80027cc:	6a3a      	ldr	r2, [r7, #32]
 80027ce:	e841 2300 	strex	r3, r2, [r1]
 80027d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1e5      	bne.n	80027a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e00f      	b.n	8002816 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4013      	ands	r3, r2
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	429a      	cmp	r2, r3
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	429a      	cmp	r2, r3
 8002812:	d09f      	beq.n	8002754 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3740      	adds	r7, #64	; 0x40
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	4613      	mov	r3, r2
 800282a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	88fa      	ldrh	r2, [r7, #6]
 800283c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2222      	movs	r2, #34	; 0x22
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002862:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0220 	orr.w	r2, r2, #32
 8002882:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002890:	b480      	push	{r7}
 8002892:	b095      	sub	sp, #84	; 0x54
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	330c      	adds	r3, #12
 80028b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028b8:	643a      	str	r2, [r7, #64]	; 0x40
 80028ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028c0:	e841 2300 	strex	r3, r2, [r1]
 80028c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e5      	bne.n	8002898 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3314      	adds	r3, #20
 80028d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	e853 3f00 	ldrex	r3, [r3]
 80028da:	61fb      	str	r3, [r7, #28]
   return(result);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3314      	adds	r3, #20
 80028ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f4:	e841 2300 	strex	r3, r2, [r1]
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e5      	bne.n	80028cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	2b01      	cmp	r3, #1
 8002906:	d119      	bne.n	800293c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	330c      	adds	r3, #12
 800290e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	e853 3f00 	ldrex	r3, [r3]
 8002916:	60bb      	str	r3, [r7, #8]
   return(result);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f023 0310 	bic.w	r3, r3, #16
 800291e:	647b      	str	r3, [r7, #68]	; 0x44
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002928:	61ba      	str	r2, [r7, #24]
 800292a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	6979      	ldr	r1, [r7, #20]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	613b      	str	r3, [r7, #16]
   return(result);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e5      	bne.n	8002908 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
}
 800294a:	bf00      	nop
 800294c:	3754      	adds	r7, #84	; 0x54
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f7ff fed3 	bl	800271a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b21      	cmp	r3, #33	; 0x21
 800298e:	d13e      	bne.n	8002a0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002998:	d114      	bne.n	80029c4 <UART_Transmit_IT+0x48>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d110      	bne.n	80029c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	1c9a      	adds	r2, r3, #2
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	621a      	str	r2, [r3, #32]
 80029c2:	e008      	b.n	80029d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	1c59      	adds	r1, r3, #1
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6211      	str	r1, [r2, #32]
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29b      	uxth	r3, r3
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4619      	mov	r1, r3
 80029e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
  }
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fe64 	bl	8002708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b08c      	sub	sp, #48	; 0x30
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b22      	cmp	r3, #34	; 0x22
 8002a5c:	f040 80ae 	bne.w	8002bbc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a68:	d117      	bne.n	8002a9a <UART_Receive_IT+0x50>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d113      	bne.n	8002a9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	1c9a      	adds	r2, r3, #2
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
 8002a98:	e026      	b.n	8002ae8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aac:	d007      	beq.n	8002abe <UART_Receive_IT+0x74>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <UART_Receive_IT+0x82>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e008      	b.n	8002ade <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4619      	mov	r1, r3
 8002af6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d15d      	bne.n	8002bb8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0220 	bic.w	r2, r2, #32
 8002b0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d135      	bne.n	8002bae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	e853 3f00 	ldrex	r3, [r3]
 8002b56:	613b      	str	r3, [r7, #16]
   return(result);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f023 0310 	bic.w	r3, r3, #16
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b68:	623a      	str	r2, [r7, #32]
 8002b6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	69f9      	ldr	r1, [r7, #28]
 8002b6e:	6a3a      	ldr	r2, [r7, #32]
 8002b70:	e841 2300 	strex	r3, r2, [r1]
 8002b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e5      	bne.n	8002b48 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d10a      	bne.n	8002ba0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fdc0 	bl	800272c <HAL_UARTEx_RxEventCallback>
 8002bac:	e002      	b.n	8002bb4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fd fc78 	bl	80004a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e002      	b.n	8002bbe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3730      	adds	r7, #48	; 0x30
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c02:	f023 030c 	bic.w	r3, r3, #12
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2c      	ldr	r2, [pc, #176]	; (8002cdc <UART_SetConfig+0x114>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d103      	bne.n	8002c38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c30:	f7ff f978 	bl	8001f24 <HAL_RCC_GetPCLK2Freq>
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	e002      	b.n	8002c3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c38:	f7ff f960 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002c3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	009a      	lsls	r2, r3, #2
 8002c48:	441a      	add	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c54:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <UART_SetConfig+0x118>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	0119      	lsls	r1, r3, #4
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009a      	lsls	r2, r3, #2
 8002c68:	441a      	add	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c74:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <UART_SetConfig+0x118>)
 8002c76:	fba3 0302 	umull	r0, r3, r3, r2
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2064      	movs	r0, #100	; 0x64
 8002c7e:	fb00 f303 	mul.w	r3, r0, r3
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	3332      	adds	r3, #50	; 0x32
 8002c88:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <UART_SetConfig+0x118>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c94:	4419      	add	r1, r3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009a      	lsls	r2, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <UART_SetConfig+0x118>)
 8002cae:	fba3 0302 	umull	r0, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	2064      	movs	r0, #100	; 0x64
 8002cb6:	fb00 f303 	mul.w	r3, r0, r3
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	3332      	adds	r3, #50	; 0x32
 8002cc0:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <UART_SetConfig+0x118>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	f003 020f 	and.w	r2, r3, #15
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	440a      	add	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	51eb851f 	.word	0x51eb851f

08002ce4 <std>:
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	b510      	push	{r4, lr}
 8002ce8:	4604      	mov	r4, r0
 8002cea:	e9c0 3300 	strd	r3, r3, [r0]
 8002cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cf2:	6083      	str	r3, [r0, #8]
 8002cf4:	8181      	strh	r1, [r0, #12]
 8002cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8002cf8:	81c2      	strh	r2, [r0, #14]
 8002cfa:	6183      	str	r3, [r0, #24]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	2208      	movs	r2, #8
 8002d00:	305c      	adds	r0, #92	; 0x5c
 8002d02:	f000 f9e5 	bl	80030d0 <memset>
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <std+0x38>)
 8002d08:	6224      	str	r4, [r4, #32]
 8002d0a:	6263      	str	r3, [r4, #36]	; 0x24
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <std+0x3c>)
 8002d0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <std+0x40>)
 8002d12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <std+0x44>)
 8002d16:	6323      	str	r3, [r4, #48]	; 0x30
 8002d18:	bd10      	pop	{r4, pc}
 8002d1a:	bf00      	nop
 8002d1c:	08002f21 	.word	0x08002f21
 8002d20:	08002f43 	.word	0x08002f43
 8002d24:	08002f7b 	.word	0x08002f7b
 8002d28:	08002f9f 	.word	0x08002f9f

08002d2c <stdio_exit_handler>:
 8002d2c:	4a02      	ldr	r2, [pc, #8]	; (8002d38 <stdio_exit_handler+0xc>)
 8002d2e:	4903      	ldr	r1, [pc, #12]	; (8002d3c <stdio_exit_handler+0x10>)
 8002d30:	4803      	ldr	r0, [pc, #12]	; (8002d40 <stdio_exit_handler+0x14>)
 8002d32:	f000 b869 	b.w	8002e08 <_fwalk_sglue>
 8002d36:	bf00      	nop
 8002d38:	2000001c 	.word	0x2000001c
 8002d3c:	08003a5d 	.word	0x08003a5d
 8002d40:	20000028 	.word	0x20000028

08002d44 <cleanup_stdio>:
 8002d44:	6841      	ldr	r1, [r0, #4]
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <cleanup_stdio+0x34>)
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	4299      	cmp	r1, r3
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	d001      	beq.n	8002d54 <cleanup_stdio+0x10>
 8002d50:	f000 fe84 	bl	8003a5c <_fflush_r>
 8002d54:	68a1      	ldr	r1, [r4, #8]
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <cleanup_stdio+0x38>)
 8002d58:	4299      	cmp	r1, r3
 8002d5a:	d002      	beq.n	8002d62 <cleanup_stdio+0x1e>
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f000 fe7d 	bl	8003a5c <_fflush_r>
 8002d62:	68e1      	ldr	r1, [r4, #12]
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <cleanup_stdio+0x3c>)
 8002d66:	4299      	cmp	r1, r3
 8002d68:	d004      	beq.n	8002d74 <cleanup_stdio+0x30>
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d70:	f000 be74 	b.w	8003a5c <_fflush_r>
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	bf00      	nop
 8002d78:	20000568 	.word	0x20000568
 8002d7c:	200005d0 	.word	0x200005d0
 8002d80:	20000638 	.word	0x20000638

08002d84 <global_stdio_init.part.0>:
 8002d84:	b510      	push	{r4, lr}
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <global_stdio_init.part.0+0x30>)
 8002d88:	4c0b      	ldr	r4, [pc, #44]	; (8002db8 <global_stdio_init.part.0+0x34>)
 8002d8a:	4a0c      	ldr	r2, [pc, #48]	; (8002dbc <global_stdio_init.part.0+0x38>)
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	2104      	movs	r1, #4
 8002d92:	2200      	movs	r2, #0
 8002d94:	f7ff ffa6 	bl	8002ce4 <std>
 8002d98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2109      	movs	r1, #9
 8002da0:	f7ff ffa0 	bl	8002ce4 <std>
 8002da4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002da8:	2202      	movs	r2, #2
 8002daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dae:	2112      	movs	r1, #18
 8002db0:	f7ff bf98 	b.w	8002ce4 <std>
 8002db4:	200006a0 	.word	0x200006a0
 8002db8:	20000568 	.word	0x20000568
 8002dbc:	08002d2d 	.word	0x08002d2d

08002dc0 <__sfp_lock_acquire>:
 8002dc0:	4801      	ldr	r0, [pc, #4]	; (8002dc8 <__sfp_lock_acquire+0x8>)
 8002dc2:	f000 b9fd 	b.w	80031c0 <__retarget_lock_acquire_recursive>
 8002dc6:	bf00      	nop
 8002dc8:	200006a9 	.word	0x200006a9

08002dcc <__sfp_lock_release>:
 8002dcc:	4801      	ldr	r0, [pc, #4]	; (8002dd4 <__sfp_lock_release+0x8>)
 8002dce:	f000 b9f8 	b.w	80031c2 <__retarget_lock_release_recursive>
 8002dd2:	bf00      	nop
 8002dd4:	200006a9 	.word	0x200006a9

08002dd8 <__sinit>:
 8002dd8:	b510      	push	{r4, lr}
 8002dda:	4604      	mov	r4, r0
 8002ddc:	f7ff fff0 	bl	8002dc0 <__sfp_lock_acquire>
 8002de0:	6a23      	ldr	r3, [r4, #32]
 8002de2:	b11b      	cbz	r3, 8002dec <__sinit+0x14>
 8002de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de8:	f7ff bff0 	b.w	8002dcc <__sfp_lock_release>
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <__sinit+0x28>)
 8002dee:	6223      	str	r3, [r4, #32]
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <__sinit+0x2c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f5      	bne.n	8002de4 <__sinit+0xc>
 8002df8:	f7ff ffc4 	bl	8002d84 <global_stdio_init.part.0>
 8002dfc:	e7f2      	b.n	8002de4 <__sinit+0xc>
 8002dfe:	bf00      	nop
 8002e00:	08002d45 	.word	0x08002d45
 8002e04:	200006a0 	.word	0x200006a0

08002e08 <_fwalk_sglue>:
 8002e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e0c:	4607      	mov	r7, r0
 8002e0e:	4688      	mov	r8, r1
 8002e10:	4614      	mov	r4, r2
 8002e12:	2600      	movs	r6, #0
 8002e14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e18:	f1b9 0901 	subs.w	r9, r9, #1
 8002e1c:	d505      	bpl.n	8002e2a <_fwalk_sglue+0x22>
 8002e1e:	6824      	ldr	r4, [r4, #0]
 8002e20:	2c00      	cmp	r4, #0
 8002e22:	d1f7      	bne.n	8002e14 <_fwalk_sglue+0xc>
 8002e24:	4630      	mov	r0, r6
 8002e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e2a:	89ab      	ldrh	r3, [r5, #12]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d907      	bls.n	8002e40 <_fwalk_sglue+0x38>
 8002e30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e34:	3301      	adds	r3, #1
 8002e36:	d003      	beq.n	8002e40 <_fwalk_sglue+0x38>
 8002e38:	4629      	mov	r1, r5
 8002e3a:	4638      	mov	r0, r7
 8002e3c:	47c0      	blx	r8
 8002e3e:	4306      	orrs	r6, r0
 8002e40:	3568      	adds	r5, #104	; 0x68
 8002e42:	e7e9      	b.n	8002e18 <_fwalk_sglue+0x10>

08002e44 <iprintf>:
 8002e44:	b40f      	push	{r0, r1, r2, r3}
 8002e46:	b507      	push	{r0, r1, r2, lr}
 8002e48:	4906      	ldr	r1, [pc, #24]	; (8002e64 <iprintf+0x20>)
 8002e4a:	ab04      	add	r3, sp, #16
 8002e4c:	6808      	ldr	r0, [r1, #0]
 8002e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e52:	6881      	ldr	r1, [r0, #8]
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	f000 fad1 	bl	80033fc <_vfiprintf_r>
 8002e5a:	b003      	add	sp, #12
 8002e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e60:	b004      	add	sp, #16
 8002e62:	4770      	bx	lr
 8002e64:	20000074 	.word	0x20000074

08002e68 <_puts_r>:
 8002e68:	6a03      	ldr	r3, [r0, #32]
 8002e6a:	b570      	push	{r4, r5, r6, lr}
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	460e      	mov	r6, r1
 8002e70:	6884      	ldr	r4, [r0, #8]
 8002e72:	b90b      	cbnz	r3, 8002e78 <_puts_r+0x10>
 8002e74:	f7ff ffb0 	bl	8002dd8 <__sinit>
 8002e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e7a:	07db      	lsls	r3, r3, #31
 8002e7c:	d405      	bmi.n	8002e8a <_puts_r+0x22>
 8002e7e:	89a3      	ldrh	r3, [r4, #12]
 8002e80:	0598      	lsls	r0, r3, #22
 8002e82:	d402      	bmi.n	8002e8a <_puts_r+0x22>
 8002e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e86:	f000 f99b 	bl	80031c0 <__retarget_lock_acquire_recursive>
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	0719      	lsls	r1, r3, #28
 8002e8e:	d513      	bpl.n	8002eb8 <_puts_r+0x50>
 8002e90:	6923      	ldr	r3, [r4, #16]
 8002e92:	b18b      	cbz	r3, 8002eb8 <_puts_r+0x50>
 8002e94:	3e01      	subs	r6, #1
 8002e96:	68a3      	ldr	r3, [r4, #8]
 8002e98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60a3      	str	r3, [r4, #8]
 8002ea0:	b9e9      	cbnz	r1, 8002ede <_puts_r+0x76>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	da2e      	bge.n	8002f04 <_puts_r+0x9c>
 8002ea6:	4622      	mov	r2, r4
 8002ea8:	210a      	movs	r1, #10
 8002eaa:	4628      	mov	r0, r5
 8002eac:	f000 f87b 	bl	8002fa6 <__swbuf_r>
 8002eb0:	3001      	adds	r0, #1
 8002eb2:	d007      	beq.n	8002ec4 <_puts_r+0x5c>
 8002eb4:	250a      	movs	r5, #10
 8002eb6:	e007      	b.n	8002ec8 <_puts_r+0x60>
 8002eb8:	4621      	mov	r1, r4
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f000 f8b0 	bl	8003020 <__swsetup_r>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d0e7      	beq.n	8002e94 <_puts_r+0x2c>
 8002ec4:	f04f 35ff 	mov.w	r5, #4294967295
 8002ec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eca:	07da      	lsls	r2, r3, #31
 8002ecc:	d405      	bmi.n	8002eda <_puts_r+0x72>
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	059b      	lsls	r3, r3, #22
 8002ed2:	d402      	bmi.n	8002eda <_puts_r+0x72>
 8002ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ed6:	f000 f974 	bl	80031c2 <__retarget_lock_release_recursive>
 8002eda:	4628      	mov	r0, r5
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	da04      	bge.n	8002eec <_puts_r+0x84>
 8002ee2:	69a2      	ldr	r2, [r4, #24]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	dc06      	bgt.n	8002ef6 <_puts_r+0x8e>
 8002ee8:	290a      	cmp	r1, #10
 8002eea:	d004      	beq.n	8002ef6 <_puts_r+0x8e>
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	6022      	str	r2, [r4, #0]
 8002ef2:	7019      	strb	r1, [r3, #0]
 8002ef4:	e7cf      	b.n	8002e96 <_puts_r+0x2e>
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f000 f854 	bl	8002fa6 <__swbuf_r>
 8002efe:	3001      	adds	r0, #1
 8002f00:	d1c9      	bne.n	8002e96 <_puts_r+0x2e>
 8002f02:	e7df      	b.n	8002ec4 <_puts_r+0x5c>
 8002f04:	250a      	movs	r5, #10
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	6022      	str	r2, [r4, #0]
 8002f0c:	701d      	strb	r5, [r3, #0]
 8002f0e:	e7db      	b.n	8002ec8 <_puts_r+0x60>

08002f10 <puts>:
 8002f10:	4b02      	ldr	r3, [pc, #8]	; (8002f1c <puts+0xc>)
 8002f12:	4601      	mov	r1, r0
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	f7ff bfa7 	b.w	8002e68 <_puts_r>
 8002f1a:	bf00      	nop
 8002f1c:	20000074 	.word	0x20000074

08002f20 <__sread>:
 8002f20:	b510      	push	{r4, lr}
 8002f22:	460c      	mov	r4, r1
 8002f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f28:	f000 f8fc 	bl	8003124 <_read_r>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	bfab      	itete	ge
 8002f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f32:	89a3      	ldrhlt	r3, [r4, #12]
 8002f34:	181b      	addge	r3, r3, r0
 8002f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f3a:	bfac      	ite	ge
 8002f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f3e:	81a3      	strhlt	r3, [r4, #12]
 8002f40:	bd10      	pop	{r4, pc}

08002f42 <__swrite>:
 8002f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f46:	461f      	mov	r7, r3
 8002f48:	898b      	ldrh	r3, [r1, #12]
 8002f4a:	4605      	mov	r5, r0
 8002f4c:	05db      	lsls	r3, r3, #23
 8002f4e:	460c      	mov	r4, r1
 8002f50:	4616      	mov	r6, r2
 8002f52:	d505      	bpl.n	8002f60 <__swrite+0x1e>
 8002f54:	2302      	movs	r3, #2
 8002f56:	2200      	movs	r2, #0
 8002f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f5c:	f000 f8d0 	bl	8003100 <_lseek_r>
 8002f60:	89a3      	ldrh	r3, [r4, #12]
 8002f62:	4632      	mov	r2, r6
 8002f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f68:	81a3      	strh	r3, [r4, #12]
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f76:	f000 b8e7 	b.w	8003148 <_write_r>

08002f7a <__sseek>:
 8002f7a:	b510      	push	{r4, lr}
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f82:	f000 f8bd 	bl	8003100 <_lseek_r>
 8002f86:	1c43      	adds	r3, r0, #1
 8002f88:	89a3      	ldrh	r3, [r4, #12]
 8002f8a:	bf15      	itete	ne
 8002f8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f96:	81a3      	strheq	r3, [r4, #12]
 8002f98:	bf18      	it	ne
 8002f9a:	81a3      	strhne	r3, [r4, #12]
 8002f9c:	bd10      	pop	{r4, pc}

08002f9e <__sclose>:
 8002f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa2:	f000 b89d 	b.w	80030e0 <_close_r>

08002fa6 <__swbuf_r>:
 8002fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa8:	460e      	mov	r6, r1
 8002faa:	4614      	mov	r4, r2
 8002fac:	4605      	mov	r5, r0
 8002fae:	b118      	cbz	r0, 8002fb8 <__swbuf_r+0x12>
 8002fb0:	6a03      	ldr	r3, [r0, #32]
 8002fb2:	b90b      	cbnz	r3, 8002fb8 <__swbuf_r+0x12>
 8002fb4:	f7ff ff10 	bl	8002dd8 <__sinit>
 8002fb8:	69a3      	ldr	r3, [r4, #24]
 8002fba:	60a3      	str	r3, [r4, #8]
 8002fbc:	89a3      	ldrh	r3, [r4, #12]
 8002fbe:	071a      	lsls	r2, r3, #28
 8002fc0:	d525      	bpl.n	800300e <__swbuf_r+0x68>
 8002fc2:	6923      	ldr	r3, [r4, #16]
 8002fc4:	b31b      	cbz	r3, 800300e <__swbuf_r+0x68>
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	6922      	ldr	r2, [r4, #16]
 8002fca:	b2f6      	uxtb	r6, r6
 8002fcc:	1a98      	subs	r0, r3, r2
 8002fce:	6963      	ldr	r3, [r4, #20]
 8002fd0:	4637      	mov	r7, r6
 8002fd2:	4283      	cmp	r3, r0
 8002fd4:	dc04      	bgt.n	8002fe0 <__swbuf_r+0x3a>
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	4628      	mov	r0, r5
 8002fda:	f000 fd3f 	bl	8003a5c <_fflush_r>
 8002fde:	b9e0      	cbnz	r0, 800301a <__swbuf_r+0x74>
 8002fe0:	68a3      	ldr	r3, [r4, #8]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60a3      	str	r3, [r4, #8]
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	6022      	str	r2, [r4, #0]
 8002fec:	701e      	strb	r6, [r3, #0]
 8002fee:	6962      	ldr	r2, [r4, #20]
 8002ff0:	1c43      	adds	r3, r0, #1
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d004      	beq.n	8003000 <__swbuf_r+0x5a>
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	07db      	lsls	r3, r3, #31
 8002ffa:	d506      	bpl.n	800300a <__swbuf_r+0x64>
 8002ffc:	2e0a      	cmp	r6, #10
 8002ffe:	d104      	bne.n	800300a <__swbuf_r+0x64>
 8003000:	4621      	mov	r1, r4
 8003002:	4628      	mov	r0, r5
 8003004:	f000 fd2a 	bl	8003a5c <_fflush_r>
 8003008:	b938      	cbnz	r0, 800301a <__swbuf_r+0x74>
 800300a:	4638      	mov	r0, r7
 800300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800300e:	4621      	mov	r1, r4
 8003010:	4628      	mov	r0, r5
 8003012:	f000 f805 	bl	8003020 <__swsetup_r>
 8003016:	2800      	cmp	r0, #0
 8003018:	d0d5      	beq.n	8002fc6 <__swbuf_r+0x20>
 800301a:	f04f 37ff 	mov.w	r7, #4294967295
 800301e:	e7f4      	b.n	800300a <__swbuf_r+0x64>

08003020 <__swsetup_r>:
 8003020:	b538      	push	{r3, r4, r5, lr}
 8003022:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <__swsetup_r+0xac>)
 8003024:	4605      	mov	r5, r0
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	460c      	mov	r4, r1
 800302a:	b118      	cbz	r0, 8003034 <__swsetup_r+0x14>
 800302c:	6a03      	ldr	r3, [r0, #32]
 800302e:	b90b      	cbnz	r3, 8003034 <__swsetup_r+0x14>
 8003030:	f7ff fed2 	bl	8002dd8 <__sinit>
 8003034:	89a3      	ldrh	r3, [r4, #12]
 8003036:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800303a:	0718      	lsls	r0, r3, #28
 800303c:	d422      	bmi.n	8003084 <__swsetup_r+0x64>
 800303e:	06d9      	lsls	r1, r3, #27
 8003040:	d407      	bmi.n	8003052 <__swsetup_r+0x32>
 8003042:	2309      	movs	r3, #9
 8003044:	602b      	str	r3, [r5, #0]
 8003046:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800304a:	f04f 30ff 	mov.w	r0, #4294967295
 800304e:	81a3      	strh	r3, [r4, #12]
 8003050:	e034      	b.n	80030bc <__swsetup_r+0x9c>
 8003052:	0758      	lsls	r0, r3, #29
 8003054:	d512      	bpl.n	800307c <__swsetup_r+0x5c>
 8003056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003058:	b141      	cbz	r1, 800306c <__swsetup_r+0x4c>
 800305a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800305e:	4299      	cmp	r1, r3
 8003060:	d002      	beq.n	8003068 <__swsetup_r+0x48>
 8003062:	4628      	mov	r0, r5
 8003064:	f000 f8ae 	bl	80031c4 <_free_r>
 8003068:	2300      	movs	r3, #0
 800306a:	6363      	str	r3, [r4, #52]	; 0x34
 800306c:	89a3      	ldrh	r3, [r4, #12]
 800306e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003072:	81a3      	strh	r3, [r4, #12]
 8003074:	2300      	movs	r3, #0
 8003076:	6063      	str	r3, [r4, #4]
 8003078:	6923      	ldr	r3, [r4, #16]
 800307a:	6023      	str	r3, [r4, #0]
 800307c:	89a3      	ldrh	r3, [r4, #12]
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	81a3      	strh	r3, [r4, #12]
 8003084:	6923      	ldr	r3, [r4, #16]
 8003086:	b94b      	cbnz	r3, 800309c <__swsetup_r+0x7c>
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800308e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003092:	d003      	beq.n	800309c <__swsetup_r+0x7c>
 8003094:	4621      	mov	r1, r4
 8003096:	4628      	mov	r0, r5
 8003098:	f000 fd2d 	bl	8003af6 <__smakebuf_r>
 800309c:	89a0      	ldrh	r0, [r4, #12]
 800309e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030a2:	f010 0301 	ands.w	r3, r0, #1
 80030a6:	d00a      	beq.n	80030be <__swsetup_r+0x9e>
 80030a8:	2300      	movs	r3, #0
 80030aa:	60a3      	str	r3, [r4, #8]
 80030ac:	6963      	ldr	r3, [r4, #20]
 80030ae:	425b      	negs	r3, r3
 80030b0:	61a3      	str	r3, [r4, #24]
 80030b2:	6923      	ldr	r3, [r4, #16]
 80030b4:	b943      	cbnz	r3, 80030c8 <__swsetup_r+0xa8>
 80030b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030ba:	d1c4      	bne.n	8003046 <__swsetup_r+0x26>
 80030bc:	bd38      	pop	{r3, r4, r5, pc}
 80030be:	0781      	lsls	r1, r0, #30
 80030c0:	bf58      	it	pl
 80030c2:	6963      	ldrpl	r3, [r4, #20]
 80030c4:	60a3      	str	r3, [r4, #8]
 80030c6:	e7f4      	b.n	80030b2 <__swsetup_r+0x92>
 80030c8:	2000      	movs	r0, #0
 80030ca:	e7f7      	b.n	80030bc <__swsetup_r+0x9c>
 80030cc:	20000074 	.word	0x20000074

080030d0 <memset>:
 80030d0:	4603      	mov	r3, r0
 80030d2:	4402      	add	r2, r0
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d100      	bne.n	80030da <memset+0xa>
 80030d8:	4770      	bx	lr
 80030da:	f803 1b01 	strb.w	r1, [r3], #1
 80030de:	e7f9      	b.n	80030d4 <memset+0x4>

080030e0 <_close_r>:
 80030e0:	b538      	push	{r3, r4, r5, lr}
 80030e2:	2300      	movs	r3, #0
 80030e4:	4d05      	ldr	r5, [pc, #20]	; (80030fc <_close_r+0x1c>)
 80030e6:	4604      	mov	r4, r0
 80030e8:	4608      	mov	r0, r1
 80030ea:	602b      	str	r3, [r5, #0]
 80030ec:	f7fd fcad 	bl	8000a4a <_close>
 80030f0:	1c43      	adds	r3, r0, #1
 80030f2:	d102      	bne.n	80030fa <_close_r+0x1a>
 80030f4:	682b      	ldr	r3, [r5, #0]
 80030f6:	b103      	cbz	r3, 80030fa <_close_r+0x1a>
 80030f8:	6023      	str	r3, [r4, #0]
 80030fa:	bd38      	pop	{r3, r4, r5, pc}
 80030fc:	200006a4 	.word	0x200006a4

08003100 <_lseek_r>:
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	4604      	mov	r4, r0
 8003104:	4608      	mov	r0, r1
 8003106:	4611      	mov	r1, r2
 8003108:	2200      	movs	r2, #0
 800310a:	4d05      	ldr	r5, [pc, #20]	; (8003120 <_lseek_r+0x20>)
 800310c:	602a      	str	r2, [r5, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	f7fd fcbf 	bl	8000a92 <_lseek>
 8003114:	1c43      	adds	r3, r0, #1
 8003116:	d102      	bne.n	800311e <_lseek_r+0x1e>
 8003118:	682b      	ldr	r3, [r5, #0]
 800311a:	b103      	cbz	r3, 800311e <_lseek_r+0x1e>
 800311c:	6023      	str	r3, [r4, #0]
 800311e:	bd38      	pop	{r3, r4, r5, pc}
 8003120:	200006a4 	.word	0x200006a4

08003124 <_read_r>:
 8003124:	b538      	push	{r3, r4, r5, lr}
 8003126:	4604      	mov	r4, r0
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	2200      	movs	r2, #0
 800312e:	4d05      	ldr	r5, [pc, #20]	; (8003144 <_read_r+0x20>)
 8003130:	602a      	str	r2, [r5, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	f7fd fc50 	bl	80009d8 <_read>
 8003138:	1c43      	adds	r3, r0, #1
 800313a:	d102      	bne.n	8003142 <_read_r+0x1e>
 800313c:	682b      	ldr	r3, [r5, #0]
 800313e:	b103      	cbz	r3, 8003142 <_read_r+0x1e>
 8003140:	6023      	str	r3, [r4, #0]
 8003142:	bd38      	pop	{r3, r4, r5, pc}
 8003144:	200006a4 	.word	0x200006a4

08003148 <_write_r>:
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	4604      	mov	r4, r0
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	2200      	movs	r2, #0
 8003152:	4d05      	ldr	r5, [pc, #20]	; (8003168 <_write_r+0x20>)
 8003154:	602a      	str	r2, [r5, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	f7fd fc5b 	bl	8000a12 <_write>
 800315c:	1c43      	adds	r3, r0, #1
 800315e:	d102      	bne.n	8003166 <_write_r+0x1e>
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	b103      	cbz	r3, 8003166 <_write_r+0x1e>
 8003164:	6023      	str	r3, [r4, #0]
 8003166:	bd38      	pop	{r3, r4, r5, pc}
 8003168:	200006a4 	.word	0x200006a4

0800316c <__errno>:
 800316c:	4b01      	ldr	r3, [pc, #4]	; (8003174 <__errno+0x8>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000074 	.word	0x20000074

08003178 <__libc_init_array>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	2600      	movs	r6, #0
 800317c:	4d0c      	ldr	r5, [pc, #48]	; (80031b0 <__libc_init_array+0x38>)
 800317e:	4c0d      	ldr	r4, [pc, #52]	; (80031b4 <__libc_init_array+0x3c>)
 8003180:	1b64      	subs	r4, r4, r5
 8003182:	10a4      	asrs	r4, r4, #2
 8003184:	42a6      	cmp	r6, r4
 8003186:	d109      	bne.n	800319c <__libc_init_array+0x24>
 8003188:	f000 fd32 	bl	8003bf0 <_init>
 800318c:	2600      	movs	r6, #0
 800318e:	4d0a      	ldr	r5, [pc, #40]	; (80031b8 <__libc_init_array+0x40>)
 8003190:	4c0a      	ldr	r4, [pc, #40]	; (80031bc <__libc_init_array+0x44>)
 8003192:	1b64      	subs	r4, r4, r5
 8003194:	10a4      	asrs	r4, r4, #2
 8003196:	42a6      	cmp	r6, r4
 8003198:	d105      	bne.n	80031a6 <__libc_init_array+0x2e>
 800319a:	bd70      	pop	{r4, r5, r6, pc}
 800319c:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a0:	4798      	blx	r3
 80031a2:	3601      	adds	r6, #1
 80031a4:	e7ee      	b.n	8003184 <__libc_init_array+0xc>
 80031a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031aa:	4798      	blx	r3
 80031ac:	3601      	adds	r6, #1
 80031ae:	e7f2      	b.n	8003196 <__libc_init_array+0x1e>
 80031b0:	08003cdc 	.word	0x08003cdc
 80031b4:	08003cdc 	.word	0x08003cdc
 80031b8:	08003cdc 	.word	0x08003cdc
 80031bc:	08003ce0 	.word	0x08003ce0

080031c0 <__retarget_lock_acquire_recursive>:
 80031c0:	4770      	bx	lr

080031c2 <__retarget_lock_release_recursive>:
 80031c2:	4770      	bx	lr

080031c4 <_free_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4605      	mov	r5, r0
 80031c8:	2900      	cmp	r1, #0
 80031ca:	d040      	beq.n	800324e <_free_r+0x8a>
 80031cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031d0:	1f0c      	subs	r4, r1, #4
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bfb8      	it	lt
 80031d6:	18e4      	addlt	r4, r4, r3
 80031d8:	f000 f8dc 	bl	8003394 <__malloc_lock>
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <_free_r+0x8c>)
 80031de:	6813      	ldr	r3, [r2, #0]
 80031e0:	b933      	cbnz	r3, 80031f0 <_free_r+0x2c>
 80031e2:	6063      	str	r3, [r4, #4]
 80031e4:	6014      	str	r4, [r2, #0]
 80031e6:	4628      	mov	r0, r5
 80031e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031ec:	f000 b8d8 	b.w	80033a0 <__malloc_unlock>
 80031f0:	42a3      	cmp	r3, r4
 80031f2:	d908      	bls.n	8003206 <_free_r+0x42>
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	1821      	adds	r1, r4, r0
 80031f8:	428b      	cmp	r3, r1
 80031fa:	bf01      	itttt	eq
 80031fc:	6819      	ldreq	r1, [r3, #0]
 80031fe:	685b      	ldreq	r3, [r3, #4]
 8003200:	1809      	addeq	r1, r1, r0
 8003202:	6021      	streq	r1, [r4, #0]
 8003204:	e7ed      	b.n	80031e2 <_free_r+0x1e>
 8003206:	461a      	mov	r2, r3
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	b10b      	cbz	r3, 8003210 <_free_r+0x4c>
 800320c:	42a3      	cmp	r3, r4
 800320e:	d9fa      	bls.n	8003206 <_free_r+0x42>
 8003210:	6811      	ldr	r1, [r2, #0]
 8003212:	1850      	adds	r0, r2, r1
 8003214:	42a0      	cmp	r0, r4
 8003216:	d10b      	bne.n	8003230 <_free_r+0x6c>
 8003218:	6820      	ldr	r0, [r4, #0]
 800321a:	4401      	add	r1, r0
 800321c:	1850      	adds	r0, r2, r1
 800321e:	4283      	cmp	r3, r0
 8003220:	6011      	str	r1, [r2, #0]
 8003222:	d1e0      	bne.n	80031e6 <_free_r+0x22>
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4408      	add	r0, r1
 800322a:	6010      	str	r0, [r2, #0]
 800322c:	6053      	str	r3, [r2, #4]
 800322e:	e7da      	b.n	80031e6 <_free_r+0x22>
 8003230:	d902      	bls.n	8003238 <_free_r+0x74>
 8003232:	230c      	movs	r3, #12
 8003234:	602b      	str	r3, [r5, #0]
 8003236:	e7d6      	b.n	80031e6 <_free_r+0x22>
 8003238:	6820      	ldr	r0, [r4, #0]
 800323a:	1821      	adds	r1, r4, r0
 800323c:	428b      	cmp	r3, r1
 800323e:	bf01      	itttt	eq
 8003240:	6819      	ldreq	r1, [r3, #0]
 8003242:	685b      	ldreq	r3, [r3, #4]
 8003244:	1809      	addeq	r1, r1, r0
 8003246:	6021      	streq	r1, [r4, #0]
 8003248:	6063      	str	r3, [r4, #4]
 800324a:	6054      	str	r4, [r2, #4]
 800324c:	e7cb      	b.n	80031e6 <_free_r+0x22>
 800324e:	bd38      	pop	{r3, r4, r5, pc}
 8003250:	200006ac 	.word	0x200006ac

08003254 <sbrk_aligned>:
 8003254:	b570      	push	{r4, r5, r6, lr}
 8003256:	4e0e      	ldr	r6, [pc, #56]	; (8003290 <sbrk_aligned+0x3c>)
 8003258:	460c      	mov	r4, r1
 800325a:	6831      	ldr	r1, [r6, #0]
 800325c:	4605      	mov	r5, r0
 800325e:	b911      	cbnz	r1, 8003266 <sbrk_aligned+0x12>
 8003260:	f000 fca8 	bl	8003bb4 <_sbrk_r>
 8003264:	6030      	str	r0, [r6, #0]
 8003266:	4621      	mov	r1, r4
 8003268:	4628      	mov	r0, r5
 800326a:	f000 fca3 	bl	8003bb4 <_sbrk_r>
 800326e:	1c43      	adds	r3, r0, #1
 8003270:	d00a      	beq.n	8003288 <sbrk_aligned+0x34>
 8003272:	1cc4      	adds	r4, r0, #3
 8003274:	f024 0403 	bic.w	r4, r4, #3
 8003278:	42a0      	cmp	r0, r4
 800327a:	d007      	beq.n	800328c <sbrk_aligned+0x38>
 800327c:	1a21      	subs	r1, r4, r0
 800327e:	4628      	mov	r0, r5
 8003280:	f000 fc98 	bl	8003bb4 <_sbrk_r>
 8003284:	3001      	adds	r0, #1
 8003286:	d101      	bne.n	800328c <sbrk_aligned+0x38>
 8003288:	f04f 34ff 	mov.w	r4, #4294967295
 800328c:	4620      	mov	r0, r4
 800328e:	bd70      	pop	{r4, r5, r6, pc}
 8003290:	200006b0 	.word	0x200006b0

08003294 <_malloc_r>:
 8003294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003298:	1ccd      	adds	r5, r1, #3
 800329a:	f025 0503 	bic.w	r5, r5, #3
 800329e:	3508      	adds	r5, #8
 80032a0:	2d0c      	cmp	r5, #12
 80032a2:	bf38      	it	cc
 80032a4:	250c      	movcc	r5, #12
 80032a6:	2d00      	cmp	r5, #0
 80032a8:	4607      	mov	r7, r0
 80032aa:	db01      	blt.n	80032b0 <_malloc_r+0x1c>
 80032ac:	42a9      	cmp	r1, r5
 80032ae:	d905      	bls.n	80032bc <_malloc_r+0x28>
 80032b0:	230c      	movs	r3, #12
 80032b2:	2600      	movs	r6, #0
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4630      	mov	r0, r6
 80032b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003390 <_malloc_r+0xfc>
 80032c0:	f000 f868 	bl	8003394 <__malloc_lock>
 80032c4:	f8d8 3000 	ldr.w	r3, [r8]
 80032c8:	461c      	mov	r4, r3
 80032ca:	bb5c      	cbnz	r4, 8003324 <_malloc_r+0x90>
 80032cc:	4629      	mov	r1, r5
 80032ce:	4638      	mov	r0, r7
 80032d0:	f7ff ffc0 	bl	8003254 <sbrk_aligned>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	4604      	mov	r4, r0
 80032d8:	d155      	bne.n	8003386 <_malloc_r+0xf2>
 80032da:	f8d8 4000 	ldr.w	r4, [r8]
 80032de:	4626      	mov	r6, r4
 80032e0:	2e00      	cmp	r6, #0
 80032e2:	d145      	bne.n	8003370 <_malloc_r+0xdc>
 80032e4:	2c00      	cmp	r4, #0
 80032e6:	d048      	beq.n	800337a <_malloc_r+0xe6>
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	4631      	mov	r1, r6
 80032ec:	4638      	mov	r0, r7
 80032ee:	eb04 0903 	add.w	r9, r4, r3
 80032f2:	f000 fc5f 	bl	8003bb4 <_sbrk_r>
 80032f6:	4581      	cmp	r9, r0
 80032f8:	d13f      	bne.n	800337a <_malloc_r+0xe6>
 80032fa:	6821      	ldr	r1, [r4, #0]
 80032fc:	4638      	mov	r0, r7
 80032fe:	1a6d      	subs	r5, r5, r1
 8003300:	4629      	mov	r1, r5
 8003302:	f7ff ffa7 	bl	8003254 <sbrk_aligned>
 8003306:	3001      	adds	r0, #1
 8003308:	d037      	beq.n	800337a <_malloc_r+0xe6>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	442b      	add	r3, r5
 800330e:	6023      	str	r3, [r4, #0]
 8003310:	f8d8 3000 	ldr.w	r3, [r8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d038      	beq.n	800338a <_malloc_r+0xf6>
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	42a2      	cmp	r2, r4
 800331c:	d12b      	bne.n	8003376 <_malloc_r+0xe2>
 800331e:	2200      	movs	r2, #0
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	e00f      	b.n	8003344 <_malloc_r+0xb0>
 8003324:	6822      	ldr	r2, [r4, #0]
 8003326:	1b52      	subs	r2, r2, r5
 8003328:	d41f      	bmi.n	800336a <_malloc_r+0xd6>
 800332a:	2a0b      	cmp	r2, #11
 800332c:	d917      	bls.n	800335e <_malloc_r+0xca>
 800332e:	1961      	adds	r1, r4, r5
 8003330:	42a3      	cmp	r3, r4
 8003332:	6025      	str	r5, [r4, #0]
 8003334:	bf18      	it	ne
 8003336:	6059      	strne	r1, [r3, #4]
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	bf08      	it	eq
 800333c:	f8c8 1000 	streq.w	r1, [r8]
 8003340:	5162      	str	r2, [r4, r5]
 8003342:	604b      	str	r3, [r1, #4]
 8003344:	4638      	mov	r0, r7
 8003346:	f104 060b 	add.w	r6, r4, #11
 800334a:	f000 f829 	bl	80033a0 <__malloc_unlock>
 800334e:	f026 0607 	bic.w	r6, r6, #7
 8003352:	1d23      	adds	r3, r4, #4
 8003354:	1af2      	subs	r2, r6, r3
 8003356:	d0ae      	beq.n	80032b6 <_malloc_r+0x22>
 8003358:	1b9b      	subs	r3, r3, r6
 800335a:	50a3      	str	r3, [r4, r2]
 800335c:	e7ab      	b.n	80032b6 <_malloc_r+0x22>
 800335e:	42a3      	cmp	r3, r4
 8003360:	6862      	ldr	r2, [r4, #4]
 8003362:	d1dd      	bne.n	8003320 <_malloc_r+0x8c>
 8003364:	f8c8 2000 	str.w	r2, [r8]
 8003368:	e7ec      	b.n	8003344 <_malloc_r+0xb0>
 800336a:	4623      	mov	r3, r4
 800336c:	6864      	ldr	r4, [r4, #4]
 800336e:	e7ac      	b.n	80032ca <_malloc_r+0x36>
 8003370:	4634      	mov	r4, r6
 8003372:	6876      	ldr	r6, [r6, #4]
 8003374:	e7b4      	b.n	80032e0 <_malloc_r+0x4c>
 8003376:	4613      	mov	r3, r2
 8003378:	e7cc      	b.n	8003314 <_malloc_r+0x80>
 800337a:	230c      	movs	r3, #12
 800337c:	4638      	mov	r0, r7
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	f000 f80e 	bl	80033a0 <__malloc_unlock>
 8003384:	e797      	b.n	80032b6 <_malloc_r+0x22>
 8003386:	6025      	str	r5, [r4, #0]
 8003388:	e7dc      	b.n	8003344 <_malloc_r+0xb0>
 800338a:	605b      	str	r3, [r3, #4]
 800338c:	deff      	udf	#255	; 0xff
 800338e:	bf00      	nop
 8003390:	200006ac 	.word	0x200006ac

08003394 <__malloc_lock>:
 8003394:	4801      	ldr	r0, [pc, #4]	; (800339c <__malloc_lock+0x8>)
 8003396:	f7ff bf13 	b.w	80031c0 <__retarget_lock_acquire_recursive>
 800339a:	bf00      	nop
 800339c:	200006a8 	.word	0x200006a8

080033a0 <__malloc_unlock>:
 80033a0:	4801      	ldr	r0, [pc, #4]	; (80033a8 <__malloc_unlock+0x8>)
 80033a2:	f7ff bf0e 	b.w	80031c2 <__retarget_lock_release_recursive>
 80033a6:	bf00      	nop
 80033a8:	200006a8 	.word	0x200006a8

080033ac <__sfputc_r>:
 80033ac:	6893      	ldr	r3, [r2, #8]
 80033ae:	b410      	push	{r4}
 80033b0:	3b01      	subs	r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	6093      	str	r3, [r2, #8]
 80033b6:	da07      	bge.n	80033c8 <__sfputc_r+0x1c>
 80033b8:	6994      	ldr	r4, [r2, #24]
 80033ba:	42a3      	cmp	r3, r4
 80033bc:	db01      	blt.n	80033c2 <__sfputc_r+0x16>
 80033be:	290a      	cmp	r1, #10
 80033c0:	d102      	bne.n	80033c8 <__sfputc_r+0x1c>
 80033c2:	bc10      	pop	{r4}
 80033c4:	f7ff bdef 	b.w	8002fa6 <__swbuf_r>
 80033c8:	6813      	ldr	r3, [r2, #0]
 80033ca:	1c58      	adds	r0, r3, #1
 80033cc:	6010      	str	r0, [r2, #0]
 80033ce:	7019      	strb	r1, [r3, #0]
 80033d0:	4608      	mov	r0, r1
 80033d2:	bc10      	pop	{r4}
 80033d4:	4770      	bx	lr

080033d6 <__sfputs_r>:
 80033d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d8:	4606      	mov	r6, r0
 80033da:	460f      	mov	r7, r1
 80033dc:	4614      	mov	r4, r2
 80033de:	18d5      	adds	r5, r2, r3
 80033e0:	42ac      	cmp	r4, r5
 80033e2:	d101      	bne.n	80033e8 <__sfputs_r+0x12>
 80033e4:	2000      	movs	r0, #0
 80033e6:	e007      	b.n	80033f8 <__sfputs_r+0x22>
 80033e8:	463a      	mov	r2, r7
 80033ea:	4630      	mov	r0, r6
 80033ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f0:	f7ff ffdc 	bl	80033ac <__sfputc_r>
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	d1f3      	bne.n	80033e0 <__sfputs_r+0xa>
 80033f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033fc <_vfiprintf_r>:
 80033fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003400:	460d      	mov	r5, r1
 8003402:	4614      	mov	r4, r2
 8003404:	4698      	mov	r8, r3
 8003406:	4606      	mov	r6, r0
 8003408:	b09d      	sub	sp, #116	; 0x74
 800340a:	b118      	cbz	r0, 8003414 <_vfiprintf_r+0x18>
 800340c:	6a03      	ldr	r3, [r0, #32]
 800340e:	b90b      	cbnz	r3, 8003414 <_vfiprintf_r+0x18>
 8003410:	f7ff fce2 	bl	8002dd8 <__sinit>
 8003414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003416:	07d9      	lsls	r1, r3, #31
 8003418:	d405      	bmi.n	8003426 <_vfiprintf_r+0x2a>
 800341a:	89ab      	ldrh	r3, [r5, #12]
 800341c:	059a      	lsls	r2, r3, #22
 800341e:	d402      	bmi.n	8003426 <_vfiprintf_r+0x2a>
 8003420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003422:	f7ff fecd 	bl	80031c0 <__retarget_lock_acquire_recursive>
 8003426:	89ab      	ldrh	r3, [r5, #12]
 8003428:	071b      	lsls	r3, r3, #28
 800342a:	d501      	bpl.n	8003430 <_vfiprintf_r+0x34>
 800342c:	692b      	ldr	r3, [r5, #16]
 800342e:	b99b      	cbnz	r3, 8003458 <_vfiprintf_r+0x5c>
 8003430:	4629      	mov	r1, r5
 8003432:	4630      	mov	r0, r6
 8003434:	f7ff fdf4 	bl	8003020 <__swsetup_r>
 8003438:	b170      	cbz	r0, 8003458 <_vfiprintf_r+0x5c>
 800343a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800343c:	07dc      	lsls	r4, r3, #31
 800343e:	d504      	bpl.n	800344a <_vfiprintf_r+0x4e>
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	b01d      	add	sp, #116	; 0x74
 8003446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344a:	89ab      	ldrh	r3, [r5, #12]
 800344c:	0598      	lsls	r0, r3, #22
 800344e:	d4f7      	bmi.n	8003440 <_vfiprintf_r+0x44>
 8003450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003452:	f7ff feb6 	bl	80031c2 <__retarget_lock_release_recursive>
 8003456:	e7f3      	b.n	8003440 <_vfiprintf_r+0x44>
 8003458:	2300      	movs	r3, #0
 800345a:	9309      	str	r3, [sp, #36]	; 0x24
 800345c:	2320      	movs	r3, #32
 800345e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003462:	2330      	movs	r3, #48	; 0x30
 8003464:	f04f 0901 	mov.w	r9, #1
 8003468:	f8cd 800c 	str.w	r8, [sp, #12]
 800346c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800361c <_vfiprintf_r+0x220>
 8003470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003474:	4623      	mov	r3, r4
 8003476:	469a      	mov	sl, r3
 8003478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800347c:	b10a      	cbz	r2, 8003482 <_vfiprintf_r+0x86>
 800347e:	2a25      	cmp	r2, #37	; 0x25
 8003480:	d1f9      	bne.n	8003476 <_vfiprintf_r+0x7a>
 8003482:	ebba 0b04 	subs.w	fp, sl, r4
 8003486:	d00b      	beq.n	80034a0 <_vfiprintf_r+0xa4>
 8003488:	465b      	mov	r3, fp
 800348a:	4622      	mov	r2, r4
 800348c:	4629      	mov	r1, r5
 800348e:	4630      	mov	r0, r6
 8003490:	f7ff ffa1 	bl	80033d6 <__sfputs_r>
 8003494:	3001      	adds	r0, #1
 8003496:	f000 80a9 	beq.w	80035ec <_vfiprintf_r+0x1f0>
 800349a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800349c:	445a      	add	r2, fp
 800349e:	9209      	str	r2, [sp, #36]	; 0x24
 80034a0:	f89a 3000 	ldrb.w	r3, [sl]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80a1 	beq.w	80035ec <_vfiprintf_r+0x1f0>
 80034aa:	2300      	movs	r3, #0
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034b4:	f10a 0a01 	add.w	sl, sl, #1
 80034b8:	9304      	str	r3, [sp, #16]
 80034ba:	9307      	str	r3, [sp, #28]
 80034bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034c0:	931a      	str	r3, [sp, #104]	; 0x68
 80034c2:	4654      	mov	r4, sl
 80034c4:	2205      	movs	r2, #5
 80034c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ca:	4854      	ldr	r0, [pc, #336]	; (800361c <_vfiprintf_r+0x220>)
 80034cc:	f000 fb82 	bl	8003bd4 <memchr>
 80034d0:	9a04      	ldr	r2, [sp, #16]
 80034d2:	b9d8      	cbnz	r0, 800350c <_vfiprintf_r+0x110>
 80034d4:	06d1      	lsls	r1, r2, #27
 80034d6:	bf44      	itt	mi
 80034d8:	2320      	movmi	r3, #32
 80034da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034de:	0713      	lsls	r3, r2, #28
 80034e0:	bf44      	itt	mi
 80034e2:	232b      	movmi	r3, #43	; 0x2b
 80034e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034e8:	f89a 3000 	ldrb.w	r3, [sl]
 80034ec:	2b2a      	cmp	r3, #42	; 0x2a
 80034ee:	d015      	beq.n	800351c <_vfiprintf_r+0x120>
 80034f0:	4654      	mov	r4, sl
 80034f2:	2000      	movs	r0, #0
 80034f4:	f04f 0c0a 	mov.w	ip, #10
 80034f8:	9a07      	ldr	r2, [sp, #28]
 80034fa:	4621      	mov	r1, r4
 80034fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003500:	3b30      	subs	r3, #48	; 0x30
 8003502:	2b09      	cmp	r3, #9
 8003504:	d94d      	bls.n	80035a2 <_vfiprintf_r+0x1a6>
 8003506:	b1b0      	cbz	r0, 8003536 <_vfiprintf_r+0x13a>
 8003508:	9207      	str	r2, [sp, #28]
 800350a:	e014      	b.n	8003536 <_vfiprintf_r+0x13a>
 800350c:	eba0 0308 	sub.w	r3, r0, r8
 8003510:	fa09 f303 	lsl.w	r3, r9, r3
 8003514:	4313      	orrs	r3, r2
 8003516:	46a2      	mov	sl, r4
 8003518:	9304      	str	r3, [sp, #16]
 800351a:	e7d2      	b.n	80034c2 <_vfiprintf_r+0xc6>
 800351c:	9b03      	ldr	r3, [sp, #12]
 800351e:	1d19      	adds	r1, r3, #4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	9103      	str	r1, [sp, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	bfbb      	ittet	lt
 8003528:	425b      	neglt	r3, r3
 800352a:	f042 0202 	orrlt.w	r2, r2, #2
 800352e:	9307      	strge	r3, [sp, #28]
 8003530:	9307      	strlt	r3, [sp, #28]
 8003532:	bfb8      	it	lt
 8003534:	9204      	strlt	r2, [sp, #16]
 8003536:	7823      	ldrb	r3, [r4, #0]
 8003538:	2b2e      	cmp	r3, #46	; 0x2e
 800353a:	d10c      	bne.n	8003556 <_vfiprintf_r+0x15a>
 800353c:	7863      	ldrb	r3, [r4, #1]
 800353e:	2b2a      	cmp	r3, #42	; 0x2a
 8003540:	d134      	bne.n	80035ac <_vfiprintf_r+0x1b0>
 8003542:	9b03      	ldr	r3, [sp, #12]
 8003544:	3402      	adds	r4, #2
 8003546:	1d1a      	adds	r2, r3, #4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	9203      	str	r2, [sp, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	bfb8      	it	lt
 8003550:	f04f 33ff 	movlt.w	r3, #4294967295
 8003554:	9305      	str	r3, [sp, #20]
 8003556:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003620 <_vfiprintf_r+0x224>
 800355a:	2203      	movs	r2, #3
 800355c:	4650      	mov	r0, sl
 800355e:	7821      	ldrb	r1, [r4, #0]
 8003560:	f000 fb38 	bl	8003bd4 <memchr>
 8003564:	b138      	cbz	r0, 8003576 <_vfiprintf_r+0x17a>
 8003566:	2240      	movs	r2, #64	; 0x40
 8003568:	9b04      	ldr	r3, [sp, #16]
 800356a:	eba0 000a 	sub.w	r0, r0, sl
 800356e:	4082      	lsls	r2, r0
 8003570:	4313      	orrs	r3, r2
 8003572:	3401      	adds	r4, #1
 8003574:	9304      	str	r3, [sp, #16]
 8003576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800357a:	2206      	movs	r2, #6
 800357c:	4829      	ldr	r0, [pc, #164]	; (8003624 <_vfiprintf_r+0x228>)
 800357e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003582:	f000 fb27 	bl	8003bd4 <memchr>
 8003586:	2800      	cmp	r0, #0
 8003588:	d03f      	beq.n	800360a <_vfiprintf_r+0x20e>
 800358a:	4b27      	ldr	r3, [pc, #156]	; (8003628 <_vfiprintf_r+0x22c>)
 800358c:	bb1b      	cbnz	r3, 80035d6 <_vfiprintf_r+0x1da>
 800358e:	9b03      	ldr	r3, [sp, #12]
 8003590:	3307      	adds	r3, #7
 8003592:	f023 0307 	bic.w	r3, r3, #7
 8003596:	3308      	adds	r3, #8
 8003598:	9303      	str	r3, [sp, #12]
 800359a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800359c:	443b      	add	r3, r7
 800359e:	9309      	str	r3, [sp, #36]	; 0x24
 80035a0:	e768      	b.n	8003474 <_vfiprintf_r+0x78>
 80035a2:	460c      	mov	r4, r1
 80035a4:	2001      	movs	r0, #1
 80035a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80035aa:	e7a6      	b.n	80034fa <_vfiprintf_r+0xfe>
 80035ac:	2300      	movs	r3, #0
 80035ae:	f04f 0c0a 	mov.w	ip, #10
 80035b2:	4619      	mov	r1, r3
 80035b4:	3401      	adds	r4, #1
 80035b6:	9305      	str	r3, [sp, #20]
 80035b8:	4620      	mov	r0, r4
 80035ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035be:	3a30      	subs	r2, #48	; 0x30
 80035c0:	2a09      	cmp	r2, #9
 80035c2:	d903      	bls.n	80035cc <_vfiprintf_r+0x1d0>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0c6      	beq.n	8003556 <_vfiprintf_r+0x15a>
 80035c8:	9105      	str	r1, [sp, #20]
 80035ca:	e7c4      	b.n	8003556 <_vfiprintf_r+0x15a>
 80035cc:	4604      	mov	r4, r0
 80035ce:	2301      	movs	r3, #1
 80035d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80035d4:	e7f0      	b.n	80035b8 <_vfiprintf_r+0x1bc>
 80035d6:	ab03      	add	r3, sp, #12
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	462a      	mov	r2, r5
 80035dc:	4630      	mov	r0, r6
 80035de:	4b13      	ldr	r3, [pc, #76]	; (800362c <_vfiprintf_r+0x230>)
 80035e0:	a904      	add	r1, sp, #16
 80035e2:	f3af 8000 	nop.w
 80035e6:	4607      	mov	r7, r0
 80035e8:	1c78      	adds	r0, r7, #1
 80035ea:	d1d6      	bne.n	800359a <_vfiprintf_r+0x19e>
 80035ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035ee:	07d9      	lsls	r1, r3, #31
 80035f0:	d405      	bmi.n	80035fe <_vfiprintf_r+0x202>
 80035f2:	89ab      	ldrh	r3, [r5, #12]
 80035f4:	059a      	lsls	r2, r3, #22
 80035f6:	d402      	bmi.n	80035fe <_vfiprintf_r+0x202>
 80035f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035fa:	f7ff fde2 	bl	80031c2 <__retarget_lock_release_recursive>
 80035fe:	89ab      	ldrh	r3, [r5, #12]
 8003600:	065b      	lsls	r3, r3, #25
 8003602:	f53f af1d 	bmi.w	8003440 <_vfiprintf_r+0x44>
 8003606:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003608:	e71c      	b.n	8003444 <_vfiprintf_r+0x48>
 800360a:	ab03      	add	r3, sp, #12
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	462a      	mov	r2, r5
 8003610:	4630      	mov	r0, r6
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <_vfiprintf_r+0x230>)
 8003614:	a904      	add	r1, sp, #16
 8003616:	f000 f87d 	bl	8003714 <_printf_i>
 800361a:	e7e4      	b.n	80035e6 <_vfiprintf_r+0x1ea>
 800361c:	08003ca6 	.word	0x08003ca6
 8003620:	08003cac 	.word	0x08003cac
 8003624:	08003cb0 	.word	0x08003cb0
 8003628:	00000000 	.word	0x00000000
 800362c:	080033d7 	.word	0x080033d7

08003630 <_printf_common>:
 8003630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003634:	4616      	mov	r6, r2
 8003636:	4699      	mov	r9, r3
 8003638:	688a      	ldr	r2, [r1, #8]
 800363a:	690b      	ldr	r3, [r1, #16]
 800363c:	4607      	mov	r7, r0
 800363e:	4293      	cmp	r3, r2
 8003640:	bfb8      	it	lt
 8003642:	4613      	movlt	r3, r2
 8003644:	6033      	str	r3, [r6, #0]
 8003646:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800364a:	460c      	mov	r4, r1
 800364c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003650:	b10a      	cbz	r2, 8003656 <_printf_common+0x26>
 8003652:	3301      	adds	r3, #1
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	0699      	lsls	r1, r3, #26
 800365a:	bf42      	ittt	mi
 800365c:	6833      	ldrmi	r3, [r6, #0]
 800365e:	3302      	addmi	r3, #2
 8003660:	6033      	strmi	r3, [r6, #0]
 8003662:	6825      	ldr	r5, [r4, #0]
 8003664:	f015 0506 	ands.w	r5, r5, #6
 8003668:	d106      	bne.n	8003678 <_printf_common+0x48>
 800366a:	f104 0a19 	add.w	sl, r4, #25
 800366e:	68e3      	ldr	r3, [r4, #12]
 8003670:	6832      	ldr	r2, [r6, #0]
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	42ab      	cmp	r3, r5
 8003676:	dc2b      	bgt.n	80036d0 <_printf_common+0xa0>
 8003678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800367c:	1e13      	subs	r3, r2, #0
 800367e:	6822      	ldr	r2, [r4, #0]
 8003680:	bf18      	it	ne
 8003682:	2301      	movne	r3, #1
 8003684:	0692      	lsls	r2, r2, #26
 8003686:	d430      	bmi.n	80036ea <_printf_common+0xba>
 8003688:	4649      	mov	r1, r9
 800368a:	4638      	mov	r0, r7
 800368c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003690:	47c0      	blx	r8
 8003692:	3001      	adds	r0, #1
 8003694:	d023      	beq.n	80036de <_printf_common+0xae>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	6922      	ldr	r2, [r4, #16]
 800369a:	f003 0306 	and.w	r3, r3, #6
 800369e:	2b04      	cmp	r3, #4
 80036a0:	bf14      	ite	ne
 80036a2:	2500      	movne	r5, #0
 80036a4:	6833      	ldreq	r3, [r6, #0]
 80036a6:	f04f 0600 	mov.w	r6, #0
 80036aa:	bf08      	it	eq
 80036ac:	68e5      	ldreq	r5, [r4, #12]
 80036ae:	f104 041a 	add.w	r4, r4, #26
 80036b2:	bf08      	it	eq
 80036b4:	1aed      	subeq	r5, r5, r3
 80036b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036ba:	bf08      	it	eq
 80036bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036c0:	4293      	cmp	r3, r2
 80036c2:	bfc4      	itt	gt
 80036c4:	1a9b      	subgt	r3, r3, r2
 80036c6:	18ed      	addgt	r5, r5, r3
 80036c8:	42b5      	cmp	r5, r6
 80036ca:	d11a      	bne.n	8003702 <_printf_common+0xd2>
 80036cc:	2000      	movs	r0, #0
 80036ce:	e008      	b.n	80036e2 <_printf_common+0xb2>
 80036d0:	2301      	movs	r3, #1
 80036d2:	4652      	mov	r2, sl
 80036d4:	4649      	mov	r1, r9
 80036d6:	4638      	mov	r0, r7
 80036d8:	47c0      	blx	r8
 80036da:	3001      	adds	r0, #1
 80036dc:	d103      	bne.n	80036e6 <_printf_common+0xb6>
 80036de:	f04f 30ff 	mov.w	r0, #4294967295
 80036e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e6:	3501      	adds	r5, #1
 80036e8:	e7c1      	b.n	800366e <_printf_common+0x3e>
 80036ea:	2030      	movs	r0, #48	; 0x30
 80036ec:	18e1      	adds	r1, r4, r3
 80036ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036f8:	4422      	add	r2, r4
 80036fa:	3302      	adds	r3, #2
 80036fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003700:	e7c2      	b.n	8003688 <_printf_common+0x58>
 8003702:	2301      	movs	r3, #1
 8003704:	4622      	mov	r2, r4
 8003706:	4649      	mov	r1, r9
 8003708:	4638      	mov	r0, r7
 800370a:	47c0      	blx	r8
 800370c:	3001      	adds	r0, #1
 800370e:	d0e6      	beq.n	80036de <_printf_common+0xae>
 8003710:	3601      	adds	r6, #1
 8003712:	e7d9      	b.n	80036c8 <_printf_common+0x98>

08003714 <_printf_i>:
 8003714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003718:	7e0f      	ldrb	r7, [r1, #24]
 800371a:	4691      	mov	r9, r2
 800371c:	2f78      	cmp	r7, #120	; 0x78
 800371e:	4680      	mov	r8, r0
 8003720:	460c      	mov	r4, r1
 8003722:	469a      	mov	sl, r3
 8003724:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800372a:	d807      	bhi.n	800373c <_printf_i+0x28>
 800372c:	2f62      	cmp	r7, #98	; 0x62
 800372e:	d80a      	bhi.n	8003746 <_printf_i+0x32>
 8003730:	2f00      	cmp	r7, #0
 8003732:	f000 80d5 	beq.w	80038e0 <_printf_i+0x1cc>
 8003736:	2f58      	cmp	r7, #88	; 0x58
 8003738:	f000 80c1 	beq.w	80038be <_printf_i+0x1aa>
 800373c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003744:	e03a      	b.n	80037bc <_printf_i+0xa8>
 8003746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800374a:	2b15      	cmp	r3, #21
 800374c:	d8f6      	bhi.n	800373c <_printf_i+0x28>
 800374e:	a101      	add	r1, pc, #4	; (adr r1, 8003754 <_printf_i+0x40>)
 8003750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003754:	080037ad 	.word	0x080037ad
 8003758:	080037c1 	.word	0x080037c1
 800375c:	0800373d 	.word	0x0800373d
 8003760:	0800373d 	.word	0x0800373d
 8003764:	0800373d 	.word	0x0800373d
 8003768:	0800373d 	.word	0x0800373d
 800376c:	080037c1 	.word	0x080037c1
 8003770:	0800373d 	.word	0x0800373d
 8003774:	0800373d 	.word	0x0800373d
 8003778:	0800373d 	.word	0x0800373d
 800377c:	0800373d 	.word	0x0800373d
 8003780:	080038c7 	.word	0x080038c7
 8003784:	080037ed 	.word	0x080037ed
 8003788:	08003881 	.word	0x08003881
 800378c:	0800373d 	.word	0x0800373d
 8003790:	0800373d 	.word	0x0800373d
 8003794:	080038e9 	.word	0x080038e9
 8003798:	0800373d 	.word	0x0800373d
 800379c:	080037ed 	.word	0x080037ed
 80037a0:	0800373d 	.word	0x0800373d
 80037a4:	0800373d 	.word	0x0800373d
 80037a8:	08003889 	.word	0x08003889
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	1d1a      	adds	r2, r3, #4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	602a      	str	r2, [r5, #0]
 80037b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037bc:	2301      	movs	r3, #1
 80037be:	e0a0      	b.n	8003902 <_printf_i+0x1ee>
 80037c0:	6820      	ldr	r0, [r4, #0]
 80037c2:	682b      	ldr	r3, [r5, #0]
 80037c4:	0607      	lsls	r7, r0, #24
 80037c6:	f103 0104 	add.w	r1, r3, #4
 80037ca:	6029      	str	r1, [r5, #0]
 80037cc:	d501      	bpl.n	80037d2 <_printf_i+0xbe>
 80037ce:	681e      	ldr	r6, [r3, #0]
 80037d0:	e003      	b.n	80037da <_printf_i+0xc6>
 80037d2:	0646      	lsls	r6, r0, #25
 80037d4:	d5fb      	bpl.n	80037ce <_printf_i+0xba>
 80037d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037da:	2e00      	cmp	r6, #0
 80037dc:	da03      	bge.n	80037e6 <_printf_i+0xd2>
 80037de:	232d      	movs	r3, #45	; 0x2d
 80037e0:	4276      	negs	r6, r6
 80037e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037e6:	230a      	movs	r3, #10
 80037e8:	4859      	ldr	r0, [pc, #356]	; (8003950 <_printf_i+0x23c>)
 80037ea:	e012      	b.n	8003812 <_printf_i+0xfe>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	6820      	ldr	r0, [r4, #0]
 80037f0:	1d19      	adds	r1, r3, #4
 80037f2:	6029      	str	r1, [r5, #0]
 80037f4:	0605      	lsls	r5, r0, #24
 80037f6:	d501      	bpl.n	80037fc <_printf_i+0xe8>
 80037f8:	681e      	ldr	r6, [r3, #0]
 80037fa:	e002      	b.n	8003802 <_printf_i+0xee>
 80037fc:	0641      	lsls	r1, r0, #25
 80037fe:	d5fb      	bpl.n	80037f8 <_printf_i+0xe4>
 8003800:	881e      	ldrh	r6, [r3, #0]
 8003802:	2f6f      	cmp	r7, #111	; 0x6f
 8003804:	bf0c      	ite	eq
 8003806:	2308      	moveq	r3, #8
 8003808:	230a      	movne	r3, #10
 800380a:	4851      	ldr	r0, [pc, #324]	; (8003950 <_printf_i+0x23c>)
 800380c:	2100      	movs	r1, #0
 800380e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003812:	6865      	ldr	r5, [r4, #4]
 8003814:	2d00      	cmp	r5, #0
 8003816:	bfa8      	it	ge
 8003818:	6821      	ldrge	r1, [r4, #0]
 800381a:	60a5      	str	r5, [r4, #8]
 800381c:	bfa4      	itt	ge
 800381e:	f021 0104 	bicge.w	r1, r1, #4
 8003822:	6021      	strge	r1, [r4, #0]
 8003824:	b90e      	cbnz	r6, 800382a <_printf_i+0x116>
 8003826:	2d00      	cmp	r5, #0
 8003828:	d04b      	beq.n	80038c2 <_printf_i+0x1ae>
 800382a:	4615      	mov	r5, r2
 800382c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003830:	fb03 6711 	mls	r7, r3, r1, r6
 8003834:	5dc7      	ldrb	r7, [r0, r7]
 8003836:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800383a:	4637      	mov	r7, r6
 800383c:	42bb      	cmp	r3, r7
 800383e:	460e      	mov	r6, r1
 8003840:	d9f4      	bls.n	800382c <_printf_i+0x118>
 8003842:	2b08      	cmp	r3, #8
 8003844:	d10b      	bne.n	800385e <_printf_i+0x14a>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	07de      	lsls	r6, r3, #31
 800384a:	d508      	bpl.n	800385e <_printf_i+0x14a>
 800384c:	6923      	ldr	r3, [r4, #16]
 800384e:	6861      	ldr	r1, [r4, #4]
 8003850:	4299      	cmp	r1, r3
 8003852:	bfde      	ittt	le
 8003854:	2330      	movle	r3, #48	; 0x30
 8003856:	f805 3c01 	strble.w	r3, [r5, #-1]
 800385a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800385e:	1b52      	subs	r2, r2, r5
 8003860:	6122      	str	r2, [r4, #16]
 8003862:	464b      	mov	r3, r9
 8003864:	4621      	mov	r1, r4
 8003866:	4640      	mov	r0, r8
 8003868:	f8cd a000 	str.w	sl, [sp]
 800386c:	aa03      	add	r2, sp, #12
 800386e:	f7ff fedf 	bl	8003630 <_printf_common>
 8003872:	3001      	adds	r0, #1
 8003874:	d14a      	bne.n	800390c <_printf_i+0x1f8>
 8003876:	f04f 30ff 	mov.w	r0, #4294967295
 800387a:	b004      	add	sp, #16
 800387c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	f043 0320 	orr.w	r3, r3, #32
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	2778      	movs	r7, #120	; 0x78
 800388a:	4832      	ldr	r0, [pc, #200]	; (8003954 <_printf_i+0x240>)
 800388c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	6829      	ldr	r1, [r5, #0]
 8003894:	061f      	lsls	r7, r3, #24
 8003896:	f851 6b04 	ldr.w	r6, [r1], #4
 800389a:	d402      	bmi.n	80038a2 <_printf_i+0x18e>
 800389c:	065f      	lsls	r7, r3, #25
 800389e:	bf48      	it	mi
 80038a0:	b2b6      	uxthmi	r6, r6
 80038a2:	07df      	lsls	r7, r3, #31
 80038a4:	bf48      	it	mi
 80038a6:	f043 0320 	orrmi.w	r3, r3, #32
 80038aa:	6029      	str	r1, [r5, #0]
 80038ac:	bf48      	it	mi
 80038ae:	6023      	strmi	r3, [r4, #0]
 80038b0:	b91e      	cbnz	r6, 80038ba <_printf_i+0x1a6>
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	f023 0320 	bic.w	r3, r3, #32
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	2310      	movs	r3, #16
 80038bc:	e7a6      	b.n	800380c <_printf_i+0xf8>
 80038be:	4824      	ldr	r0, [pc, #144]	; (8003950 <_printf_i+0x23c>)
 80038c0:	e7e4      	b.n	800388c <_printf_i+0x178>
 80038c2:	4615      	mov	r5, r2
 80038c4:	e7bd      	b.n	8003842 <_printf_i+0x12e>
 80038c6:	682b      	ldr	r3, [r5, #0]
 80038c8:	6826      	ldr	r6, [r4, #0]
 80038ca:	1d18      	adds	r0, r3, #4
 80038cc:	6961      	ldr	r1, [r4, #20]
 80038ce:	6028      	str	r0, [r5, #0]
 80038d0:	0635      	lsls	r5, r6, #24
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	d501      	bpl.n	80038da <_printf_i+0x1c6>
 80038d6:	6019      	str	r1, [r3, #0]
 80038d8:	e002      	b.n	80038e0 <_printf_i+0x1cc>
 80038da:	0670      	lsls	r0, r6, #25
 80038dc:	d5fb      	bpl.n	80038d6 <_printf_i+0x1c2>
 80038de:	8019      	strh	r1, [r3, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	4615      	mov	r5, r2
 80038e4:	6123      	str	r3, [r4, #16]
 80038e6:	e7bc      	b.n	8003862 <_printf_i+0x14e>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	2100      	movs	r1, #0
 80038ec:	1d1a      	adds	r2, r3, #4
 80038ee:	602a      	str	r2, [r5, #0]
 80038f0:	681d      	ldr	r5, [r3, #0]
 80038f2:	6862      	ldr	r2, [r4, #4]
 80038f4:	4628      	mov	r0, r5
 80038f6:	f000 f96d 	bl	8003bd4 <memchr>
 80038fa:	b108      	cbz	r0, 8003900 <_printf_i+0x1ec>
 80038fc:	1b40      	subs	r0, r0, r5
 80038fe:	6060      	str	r0, [r4, #4]
 8003900:	6863      	ldr	r3, [r4, #4]
 8003902:	6123      	str	r3, [r4, #16]
 8003904:	2300      	movs	r3, #0
 8003906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800390a:	e7aa      	b.n	8003862 <_printf_i+0x14e>
 800390c:	462a      	mov	r2, r5
 800390e:	4649      	mov	r1, r9
 8003910:	4640      	mov	r0, r8
 8003912:	6923      	ldr	r3, [r4, #16]
 8003914:	47d0      	blx	sl
 8003916:	3001      	adds	r0, #1
 8003918:	d0ad      	beq.n	8003876 <_printf_i+0x162>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	079b      	lsls	r3, r3, #30
 800391e:	d413      	bmi.n	8003948 <_printf_i+0x234>
 8003920:	68e0      	ldr	r0, [r4, #12]
 8003922:	9b03      	ldr	r3, [sp, #12]
 8003924:	4298      	cmp	r0, r3
 8003926:	bfb8      	it	lt
 8003928:	4618      	movlt	r0, r3
 800392a:	e7a6      	b.n	800387a <_printf_i+0x166>
 800392c:	2301      	movs	r3, #1
 800392e:	4632      	mov	r2, r6
 8003930:	4649      	mov	r1, r9
 8003932:	4640      	mov	r0, r8
 8003934:	47d0      	blx	sl
 8003936:	3001      	adds	r0, #1
 8003938:	d09d      	beq.n	8003876 <_printf_i+0x162>
 800393a:	3501      	adds	r5, #1
 800393c:	68e3      	ldr	r3, [r4, #12]
 800393e:	9903      	ldr	r1, [sp, #12]
 8003940:	1a5b      	subs	r3, r3, r1
 8003942:	42ab      	cmp	r3, r5
 8003944:	dcf2      	bgt.n	800392c <_printf_i+0x218>
 8003946:	e7eb      	b.n	8003920 <_printf_i+0x20c>
 8003948:	2500      	movs	r5, #0
 800394a:	f104 0619 	add.w	r6, r4, #25
 800394e:	e7f5      	b.n	800393c <_printf_i+0x228>
 8003950:	08003cb7 	.word	0x08003cb7
 8003954:	08003cc8 	.word	0x08003cc8

08003958 <__sflush_r>:
 8003958:	898a      	ldrh	r2, [r1, #12]
 800395a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395c:	4605      	mov	r5, r0
 800395e:	0710      	lsls	r0, r2, #28
 8003960:	460c      	mov	r4, r1
 8003962:	d457      	bmi.n	8003a14 <__sflush_r+0xbc>
 8003964:	684b      	ldr	r3, [r1, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	dc04      	bgt.n	8003974 <__sflush_r+0x1c>
 800396a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	dc01      	bgt.n	8003974 <__sflush_r+0x1c>
 8003970:	2000      	movs	r0, #0
 8003972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003976:	2e00      	cmp	r6, #0
 8003978:	d0fa      	beq.n	8003970 <__sflush_r+0x18>
 800397a:	2300      	movs	r3, #0
 800397c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003980:	682f      	ldr	r7, [r5, #0]
 8003982:	6a21      	ldr	r1, [r4, #32]
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	d032      	beq.n	80039ee <__sflush_r+0x96>
 8003988:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	075a      	lsls	r2, r3, #29
 800398e:	d505      	bpl.n	800399c <__sflush_r+0x44>
 8003990:	6863      	ldr	r3, [r4, #4]
 8003992:	1ac0      	subs	r0, r0, r3
 8003994:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003996:	b10b      	cbz	r3, 800399c <__sflush_r+0x44>
 8003998:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800399a:	1ac0      	subs	r0, r0, r3
 800399c:	2300      	movs	r3, #0
 800399e:	4602      	mov	r2, r0
 80039a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039a2:	4628      	mov	r0, r5
 80039a4:	6a21      	ldr	r1, [r4, #32]
 80039a6:	47b0      	blx	r6
 80039a8:	1c43      	adds	r3, r0, #1
 80039aa:	89a3      	ldrh	r3, [r4, #12]
 80039ac:	d106      	bne.n	80039bc <__sflush_r+0x64>
 80039ae:	6829      	ldr	r1, [r5, #0]
 80039b0:	291d      	cmp	r1, #29
 80039b2:	d82b      	bhi.n	8003a0c <__sflush_r+0xb4>
 80039b4:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <__sflush_r+0x100>)
 80039b6:	410a      	asrs	r2, r1
 80039b8:	07d6      	lsls	r6, r2, #31
 80039ba:	d427      	bmi.n	8003a0c <__sflush_r+0xb4>
 80039bc:	2200      	movs	r2, #0
 80039be:	6062      	str	r2, [r4, #4]
 80039c0:	6922      	ldr	r2, [r4, #16]
 80039c2:	04d9      	lsls	r1, r3, #19
 80039c4:	6022      	str	r2, [r4, #0]
 80039c6:	d504      	bpl.n	80039d2 <__sflush_r+0x7a>
 80039c8:	1c42      	adds	r2, r0, #1
 80039ca:	d101      	bne.n	80039d0 <__sflush_r+0x78>
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	b903      	cbnz	r3, 80039d2 <__sflush_r+0x7a>
 80039d0:	6560      	str	r0, [r4, #84]	; 0x54
 80039d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039d4:	602f      	str	r7, [r5, #0]
 80039d6:	2900      	cmp	r1, #0
 80039d8:	d0ca      	beq.n	8003970 <__sflush_r+0x18>
 80039da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039de:	4299      	cmp	r1, r3
 80039e0:	d002      	beq.n	80039e8 <__sflush_r+0x90>
 80039e2:	4628      	mov	r0, r5
 80039e4:	f7ff fbee 	bl	80031c4 <_free_r>
 80039e8:	2000      	movs	r0, #0
 80039ea:	6360      	str	r0, [r4, #52]	; 0x34
 80039ec:	e7c1      	b.n	8003972 <__sflush_r+0x1a>
 80039ee:	2301      	movs	r3, #1
 80039f0:	4628      	mov	r0, r5
 80039f2:	47b0      	blx	r6
 80039f4:	1c41      	adds	r1, r0, #1
 80039f6:	d1c8      	bne.n	800398a <__sflush_r+0x32>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0c5      	beq.n	800398a <__sflush_r+0x32>
 80039fe:	2b1d      	cmp	r3, #29
 8003a00:	d001      	beq.n	8003a06 <__sflush_r+0xae>
 8003a02:	2b16      	cmp	r3, #22
 8003a04:	d101      	bne.n	8003a0a <__sflush_r+0xb2>
 8003a06:	602f      	str	r7, [r5, #0]
 8003a08:	e7b2      	b.n	8003970 <__sflush_r+0x18>
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a10:	81a3      	strh	r3, [r4, #12]
 8003a12:	e7ae      	b.n	8003972 <__sflush_r+0x1a>
 8003a14:	690f      	ldr	r7, [r1, #16]
 8003a16:	2f00      	cmp	r7, #0
 8003a18:	d0aa      	beq.n	8003970 <__sflush_r+0x18>
 8003a1a:	0793      	lsls	r3, r2, #30
 8003a1c:	bf18      	it	ne
 8003a1e:	2300      	movne	r3, #0
 8003a20:	680e      	ldr	r6, [r1, #0]
 8003a22:	bf08      	it	eq
 8003a24:	694b      	ldreq	r3, [r1, #20]
 8003a26:	1bf6      	subs	r6, r6, r7
 8003a28:	600f      	str	r7, [r1, #0]
 8003a2a:	608b      	str	r3, [r1, #8]
 8003a2c:	2e00      	cmp	r6, #0
 8003a2e:	dd9f      	ble.n	8003970 <__sflush_r+0x18>
 8003a30:	4633      	mov	r3, r6
 8003a32:	463a      	mov	r2, r7
 8003a34:	4628      	mov	r0, r5
 8003a36:	6a21      	ldr	r1, [r4, #32]
 8003a38:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003a3c:	47e0      	blx	ip
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	dc06      	bgt.n	8003a50 <__sflush_r+0xf8>
 8003a42:	89a3      	ldrh	r3, [r4, #12]
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a4c:	81a3      	strh	r3, [r4, #12]
 8003a4e:	e790      	b.n	8003972 <__sflush_r+0x1a>
 8003a50:	4407      	add	r7, r0
 8003a52:	1a36      	subs	r6, r6, r0
 8003a54:	e7ea      	b.n	8003a2c <__sflush_r+0xd4>
 8003a56:	bf00      	nop
 8003a58:	dfbffffe 	.word	0xdfbffffe

08003a5c <_fflush_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	690b      	ldr	r3, [r1, #16]
 8003a60:	4605      	mov	r5, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	b913      	cbnz	r3, 8003a6c <_fflush_r+0x10>
 8003a66:	2500      	movs	r5, #0
 8003a68:	4628      	mov	r0, r5
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
 8003a6c:	b118      	cbz	r0, 8003a76 <_fflush_r+0x1a>
 8003a6e:	6a03      	ldr	r3, [r0, #32]
 8003a70:	b90b      	cbnz	r3, 8003a76 <_fflush_r+0x1a>
 8003a72:	f7ff f9b1 	bl	8002dd8 <__sinit>
 8003a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f3      	beq.n	8003a66 <_fflush_r+0xa>
 8003a7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a80:	07d0      	lsls	r0, r2, #31
 8003a82:	d404      	bmi.n	8003a8e <_fflush_r+0x32>
 8003a84:	0599      	lsls	r1, r3, #22
 8003a86:	d402      	bmi.n	8003a8e <_fflush_r+0x32>
 8003a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a8a:	f7ff fb99 	bl	80031c0 <__retarget_lock_acquire_recursive>
 8003a8e:	4628      	mov	r0, r5
 8003a90:	4621      	mov	r1, r4
 8003a92:	f7ff ff61 	bl	8003958 <__sflush_r>
 8003a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a98:	4605      	mov	r5, r0
 8003a9a:	07da      	lsls	r2, r3, #31
 8003a9c:	d4e4      	bmi.n	8003a68 <_fflush_r+0xc>
 8003a9e:	89a3      	ldrh	r3, [r4, #12]
 8003aa0:	059b      	lsls	r3, r3, #22
 8003aa2:	d4e1      	bmi.n	8003a68 <_fflush_r+0xc>
 8003aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aa6:	f7ff fb8c 	bl	80031c2 <__retarget_lock_release_recursive>
 8003aaa:	e7dd      	b.n	8003a68 <_fflush_r+0xc>

08003aac <__swhatbuf_r>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	460c      	mov	r4, r1
 8003ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ab4:	4615      	mov	r5, r2
 8003ab6:	2900      	cmp	r1, #0
 8003ab8:	461e      	mov	r6, r3
 8003aba:	b096      	sub	sp, #88	; 0x58
 8003abc:	da0c      	bge.n	8003ad8 <__swhatbuf_r+0x2c>
 8003abe:	89a3      	ldrh	r3, [r4, #12]
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ac6:	bf0c      	ite	eq
 8003ac8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003acc:	2340      	movne	r3, #64	; 0x40
 8003ace:	2000      	movs	r0, #0
 8003ad0:	6031      	str	r1, [r6, #0]
 8003ad2:	602b      	str	r3, [r5, #0]
 8003ad4:	b016      	add	sp, #88	; 0x58
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	466a      	mov	r2, sp
 8003ada:	f000 f849 	bl	8003b70 <_fstat_r>
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	dbed      	blt.n	8003abe <__swhatbuf_r+0x12>
 8003ae2:	9901      	ldr	r1, [sp, #4]
 8003ae4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003ae8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003aec:	4259      	negs	r1, r3
 8003aee:	4159      	adcs	r1, r3
 8003af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af4:	e7eb      	b.n	8003ace <__swhatbuf_r+0x22>

08003af6 <__smakebuf_r>:
 8003af6:	898b      	ldrh	r3, [r1, #12]
 8003af8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003afa:	079d      	lsls	r5, r3, #30
 8003afc:	4606      	mov	r6, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	d507      	bpl.n	8003b12 <__smakebuf_r+0x1c>
 8003b02:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	6123      	str	r3, [r4, #16]
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	6163      	str	r3, [r4, #20]
 8003b0e:	b002      	add	sp, #8
 8003b10:	bd70      	pop	{r4, r5, r6, pc}
 8003b12:	466a      	mov	r2, sp
 8003b14:	ab01      	add	r3, sp, #4
 8003b16:	f7ff ffc9 	bl	8003aac <__swhatbuf_r>
 8003b1a:	9900      	ldr	r1, [sp, #0]
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	4630      	mov	r0, r6
 8003b20:	f7ff fbb8 	bl	8003294 <_malloc_r>
 8003b24:	b948      	cbnz	r0, 8003b3a <__smakebuf_r+0x44>
 8003b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b2a:	059a      	lsls	r2, r3, #22
 8003b2c:	d4ef      	bmi.n	8003b0e <__smakebuf_r+0x18>
 8003b2e:	f023 0303 	bic.w	r3, r3, #3
 8003b32:	f043 0302 	orr.w	r3, r3, #2
 8003b36:	81a3      	strh	r3, [r4, #12]
 8003b38:	e7e3      	b.n	8003b02 <__smakebuf_r+0xc>
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	6020      	str	r0, [r4, #0]
 8003b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b42:	81a3      	strh	r3, [r4, #12]
 8003b44:	9b00      	ldr	r3, [sp, #0]
 8003b46:	6120      	str	r0, [r4, #16]
 8003b48:	6163      	str	r3, [r4, #20]
 8003b4a:	9b01      	ldr	r3, [sp, #4]
 8003b4c:	b15b      	cbz	r3, 8003b66 <__smakebuf_r+0x70>
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b54:	f000 f81e 	bl	8003b94 <_isatty_r>
 8003b58:	b128      	cbz	r0, 8003b66 <__smakebuf_r+0x70>
 8003b5a:	89a3      	ldrh	r3, [r4, #12]
 8003b5c:	f023 0303 	bic.w	r3, r3, #3
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	89a3      	ldrh	r3, [r4, #12]
 8003b68:	431d      	orrs	r5, r3
 8003b6a:	81a5      	strh	r5, [r4, #12]
 8003b6c:	e7cf      	b.n	8003b0e <__smakebuf_r+0x18>
	...

08003b70 <_fstat_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	2300      	movs	r3, #0
 8003b74:	4d06      	ldr	r5, [pc, #24]	; (8003b90 <_fstat_r+0x20>)
 8003b76:	4604      	mov	r4, r0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	602b      	str	r3, [r5, #0]
 8003b7e:	f7fc ff6f 	bl	8000a60 <_fstat>
 8003b82:	1c43      	adds	r3, r0, #1
 8003b84:	d102      	bne.n	8003b8c <_fstat_r+0x1c>
 8003b86:	682b      	ldr	r3, [r5, #0]
 8003b88:	b103      	cbz	r3, 8003b8c <_fstat_r+0x1c>
 8003b8a:	6023      	str	r3, [r4, #0]
 8003b8c:	bd38      	pop	{r3, r4, r5, pc}
 8003b8e:	bf00      	nop
 8003b90:	200006a4 	.word	0x200006a4

08003b94 <_isatty_r>:
 8003b94:	b538      	push	{r3, r4, r5, lr}
 8003b96:	2300      	movs	r3, #0
 8003b98:	4d05      	ldr	r5, [pc, #20]	; (8003bb0 <_isatty_r+0x1c>)
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	602b      	str	r3, [r5, #0]
 8003ba0:	f7fc ff6d 	bl	8000a7e <_isatty>
 8003ba4:	1c43      	adds	r3, r0, #1
 8003ba6:	d102      	bne.n	8003bae <_isatty_r+0x1a>
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	b103      	cbz	r3, 8003bae <_isatty_r+0x1a>
 8003bac:	6023      	str	r3, [r4, #0]
 8003bae:	bd38      	pop	{r3, r4, r5, pc}
 8003bb0:	200006a4 	.word	0x200006a4

08003bb4 <_sbrk_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	4d05      	ldr	r5, [pc, #20]	; (8003bd0 <_sbrk_r+0x1c>)
 8003bba:	4604      	mov	r4, r0
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	602b      	str	r3, [r5, #0]
 8003bc0:	f7fc ff74 	bl	8000aac <_sbrk>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d102      	bne.n	8003bce <_sbrk_r+0x1a>
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	b103      	cbz	r3, 8003bce <_sbrk_r+0x1a>
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
 8003bd0:	200006a4 	.word	0x200006a4

08003bd4 <memchr>:
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	b2c9      	uxtb	r1, r1
 8003bda:	4402      	add	r2, r0
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	d101      	bne.n	8003be6 <memchr+0x12>
 8003be2:	2000      	movs	r0, #0
 8003be4:	e003      	b.n	8003bee <memchr+0x1a>
 8003be6:	7804      	ldrb	r4, [r0, #0]
 8003be8:	3301      	adds	r3, #1
 8003bea:	428c      	cmp	r4, r1
 8003bec:	d1f6      	bne.n	8003bdc <memchr+0x8>
 8003bee:	bd10      	pop	{r4, pc}

08003bf0 <_init>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	bf00      	nop
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr

08003bfc <_fini>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	bf00      	nop
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr
